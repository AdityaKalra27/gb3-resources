
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `/gb3-resources/processor/yscripts/sail.ys' --

1. Executing Verilog-2005 frontend: verilog/adder.v
Parsing Verilog input from `verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Note: Assuming pure combinatorial block at verilog/alu.v:78.2-145.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at verilog/alu.v:147.2-158.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/instruction_mem_new.v
Parsing Verilog input from `verilog/instruction_mem_new.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Generating RTLIL representation for module `\csr_file'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: verilog/clock_divider.v
Parsing Verilog input from `verilog/clock_divider.v' to AST representation.
Generating RTLIL representation for module `\clock_divider_2N'.
Warning: wire '\clk_out' is assigned in a block at verilog/clock_divider.v:30.25-30.44.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

20. Executing SYNTH_ICE40 pass.

20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

20.2. Executing HIERARCHY pass (managing design hierarchy).

20.2.1. Finding top of design hierarchy..
root of   2 design levels: top                 
root of   0 design levels: clock_divider_2N    
root of   0 design levels: sign_mask_gen       
root of   0 design levels: csr_file            
root of   0 design levels: regfile             
root of   0 design levels: data_mem            
root of   0 design levels: instruction_memory  
root of   0 design levels: control             
root of   0 design levels: imm_gen             
root of   0 design levels: branch_predictor    
root of   0 design levels: ForwardingUnit      
root of   0 design levels: branch_decision     
root of   0 design levels: program_counter     
root of   0 design levels: alu                 
root of   0 design levels: mem_wb              
root of   0 design levels: ex_mem              
root of   0 design levels: id_ex               
root of   0 design levels: if_id               
root of   0 design levels: ALUControl          
root of   0 design levels: mux2to1             
root of   1 design levels: cpu                 
root of   0 design levels: adder               
Automatically selected top as design top module.

20.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:         \adder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Used module:     \clock_divider_2N
Parameter \N = 2

20.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\clock_divider_2N'.
Parameter \N = 2
Generating RTLIL representation for module `$paramod\clock_divider_2N\N=2'.
Warning: wire '\clk_out' is assigned in a block at verilog/clock_divider.v:30.25-30.44.

20.2.4. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:         \adder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Used module:     $paramod\clock_divider_2N\N=2

20.2.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:         \adder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Used module:     $paramod\clock_divider_2N\N=2
Removing unused module `\clock_divider_2N'.
Removed 1 unused modules.

20.3. Executing PROC pass (convert processes to netlists).

20.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `regfile.$proc$verilog/register_file.v:0$274'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem_new.v:0$165'.
Cleaned up 0 empty switches.

20.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$verilog/clock_divider.v:26$634 in module $paramod\clock_divider_2N\N=2.
Marked 1 switch rules as full_case in process $proc$verilog/dataMem_mask_gen.v:58$282 in module sign_mask_gen.
Marked 1 switch rules as full_case in process $proc$verilog/data_mem.v:240$235 in module data_mem.
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$102 in module imm_gen.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:147$32 in module alu.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:78$18 in module alu.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$8 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$8 in module ALUControl.
Removed a total of 5 dead cases.

20.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 36 assignments to connections.

20.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:0$639'.
  Set init value: \count = 4'0000
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$250'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:60$249'.
  Set init value: \state = 0
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$103'.
  Set init value: \imm = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$101'.
  Set init value: \s = 2'00
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$42'.
  Set init value: \outAddr = 0
Found init rule in `\alu.$proc$verilog/alu.v:0$40'.
  Set init value: \ALUOut = 0
  Set init value: \Branch_Enable = 1'0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$13'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$11'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$9'.
  Set init value: \ALUCtl = 7'0000000

20.3.5. Executing PROC_ARST pass (detect async resets in processes).

20.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$toplevel.v:56$293'.
Creating decoders for process `\top.$proc$toplevel.v:55$292'.
Creating decoders for process `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:0$639'.
Creating decoders for process `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:26$634'.
     1/2: $0\count[3:0]
     2/2: $0\clk_out[0:0]
Creating decoders for process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$282'.
     1/1: $1\mask[2:0]
Creating decoders for process `\csr_file.$proc$verilog/CSR.v:57$276'.
     1/3: $0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279
     2/3: $0$memwr$\csr_file$verilog/CSR.v:59$275_DATA[31:0]$278
     3/3: $0$memwr$\csr_file$verilog/CSR.v:59$275_ADDR[11:0]$277
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$253'.
     1/3: $0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256
     2/3: $0$memwr$\regfile$verilog/register_file.v:97$252_DATA[31:0]$255
     3/3: $0$memwr$\regfile$verilog/register_file.v:97$252_ADDR[4:0]$254
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$250'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:60$249'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:240$235'.
     1/12: $0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238
     2/12: $0$memwr$\data_block$verilog/data_mem.v:283$166_DATA[31:0]$237
     3/12: $0$memwr$\data_block$verilog/data_mem.v:283$166_ADDR[31:0]$236
     4/12: $0\sign_mask_buf[3:0]
     5/12: $0\addr_buf[31:0]
     6/12: $0\write_data_buffer[31:0]
     7/12: $0\memwrite_buf[0:0]
     8/12: $0\memread_buf[0:0]
     9/12: $0\word_buf[31:0]
    10/12: $0\state[31:0]
    11/12: $0\clk_stall[0:0]
    12/12: $0\read_data[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:231$231'.
     1/1: $0\led_reg[31:0]
Creating decoders for process `\instruction_memory.$proc$verilog/instruction_mem_new.v:7$164'.
Creating decoders for process `\instruction_memory.$proc$verilog/instruction_mem_new.v:18$160'.
     1/1: $0\out[31:0]
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$103'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$102'.
     1/1: $1\imm[31:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$101'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
     1/2: $0\s[1:0] [1]
     2/2: $0\s[1:0] [0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:92$85'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$42'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:65$41'.
Creating decoders for process `\alu.$proc$verilog/alu.v:0$40'.
Creating decoders for process `\alu.$proc$verilog/alu.v:147$32'.
     1/1: $1\Branch_Enable[0:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:78$18'.
     1/1: $1\ALUOut[31:0]
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$13'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$12'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$11'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$10'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$9'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$8'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]

20.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\CLKHF_POWERUP' from process `\top.$proc$toplevel.v:56$293'.
No latch inferred for signal `\top.\ENCLKHF' from process `\top.$proc$toplevel.v:55$292'.
No latch inferred for signal `\sign_mask_gen.\mask' from process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$282'.
No latch inferred for signal `\instruction_memory.\RE' from process `\instruction_memory.$proc$verilog/instruction_mem_new.v:7$164'.
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$102'.
No latch inferred for signal `\alu.\Branch_Enable' from process `\alu.$proc$verilog/alu.v:147$32'.
No latch inferred for signal `\alu.\ALUOut' from process `\alu.$proc$verilog/alu.v:78$18'.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$8'.

20.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\clock_divider_2N\N=2.\clk_out' using process `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:26$634'.
  created $dff cell `$procdff$879' with positive edge clock.
Creating register for signal `$paramod\clock_divider_2N\N=2.\count' using process `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:26$634'.
  created $dff cell `$procdff$880' with positive edge clock.
Creating register for signal `\csr_file.\rdVal_CSR' using process `\csr_file.$proc$verilog/CSR.v:57$276'.
  created $dff cell `$procdff$881' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$275_ADDR' using process `\csr_file.$proc$verilog/CSR.v:57$276'.
  created $dff cell `$procdff$882' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$275_DATA' using process `\csr_file.$proc$verilog/CSR.v:57$276'.
  created $dff cell `$procdff$883' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$275_EN' using process `\csr_file.$proc$verilog/CSR.v:57$276'.
  created $dff cell `$procdff$884' with positive edge clock.
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$885' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$886' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$887' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$888' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$889' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$890' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$891' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$252_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$892' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$252_DATA' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$893' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$252_EN' using process `\regfile.$proc$verilog/register_file.v:95$253'.
  created $dff cell `$procdff$894' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$895' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$896' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$897' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$898' with positive edge clock.
Creating register for signal `\data_mem.\memread_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$899' with positive edge clock.
Creating register for signal `\data_mem.\memwrite_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$900' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$901' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$902' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$903' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$166_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$904' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$166_DATA' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$905' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$166_EN' using process `\data_mem.$proc$verilog/data_mem.v:240$235'.
  created $dff cell `$procdff$906' with positive edge clock.
Creating register for signal `\data_mem.\led_reg' using process `\data_mem.$proc$verilog/data_mem.v:231$231'.
  created $dff cell `$procdff$907' with positive edge clock.
Creating register for signal `\instruction_memory.\out' using process `\instruction_memory.$proc$verilog/instruction_mem_new.v:18$160'.
  created $dff cell `$procdff$908' with negative edge clock.
Creating register for signal `\branch_predictor.\s' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
  created $dff cell `$procdff$909' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:92$85'.
  created $dff cell `$procdff$910' with negative edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:65$41'.
  created $dff cell `$procdff$911' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
  created $dff cell `$procdff$912' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
  created $dff cell `$procdff$913' with positive edge clock.
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$12'.
  created $dff cell `$procdff$914' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$10'.
  created $dff cell `$procdff$915' with positive edge clock.

20.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$toplevel.v:56$293'.
Removing empty process `top.$proc$toplevel.v:55$292'.
Removing empty process `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:0$639'.
Found and cleaned up 2 empty switches in `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:26$634'.
Removing empty process `$paramod\clock_divider_2N\N=2.$proc$verilog/clock_divider.v:26$634'.
Found and cleaned up 1 empty switch in `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$282'.
Removing empty process `sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$282'.
Found and cleaned up 1 empty switch in `\csr_file.$proc$verilog/CSR.v:57$276'.
Removing empty process `csr_file.$proc$verilog/CSR.v:57$276'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$253'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$253'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$250'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:60$249'.
Found and cleaned up 4 empty switches in `\data_mem.$proc$verilog/data_mem.v:240$235'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:240$235'.
Found and cleaned up 1 empty switch in `\data_mem.$proc$verilog/data_mem.v:231$231'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:231$231'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem_new.v:7$164'.
Found and cleaned up 1 empty switch in `\instruction_memory.$proc$verilog/instruction_mem_new.v:18$160'.
Removing empty process `instruction_memory.$proc$verilog/instruction_mem_new.v:18$160'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$103'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$102'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$102'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$101'.
Found and cleaned up 1 empty switch in `\branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:92$85'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$42'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:65$41'.
Removing empty process `alu.$proc$verilog/alu.v:0$40'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:147$32'.
Removing empty process `alu.$proc$verilog/alu.v:147$32'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:78$18'.
Removing empty process `alu.$proc$verilog/alu.v:78$18'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$13'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$12'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$11'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$10'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$9'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$8'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$8'.
Cleaned up 25 empty switches.

20.4. Executing FLATTEN pass (flatten design).
Using template $paramod\clock_divider_2N\N=2 for cells of type $paramod\clock_divider_2N\N=2.
Using template instruction_memory for cells of type instruction_memory.
Using template data_mem for cells of type data_mem.
Using template cpu for cells of type cpu.
Using template mux2to1 for cells of type mux2to1.
Using template mem_wb for cells of type mem_wb.
Using template branch_decision for cells of type branch_decision.
Using template control for cells of type control.
Using template adder for cells of type adder.
Using template program_counter for cells of type program_counter.
Using template if_id for cells of type if_id.
Using template imm_gen for cells of type imm_gen.
Using template branch_predictor for cells of type branch_predictor.
Using template csr_file for cells of type csr_file.
Using template regfile for cells of type regfile.
Using template sign_mask_gen for cells of type sign_mask_gen.
Using template ALUControl for cells of type ALUControl.
Using template id_ex for cells of type id_ex.
Using template ForwardingUnit for cells of type ForwardingUnit.
Using template alu for cells of type alu.
Using template ex_mem for cells of type ex_mem.
<suppressed ~45 debug messages>
No more expansions possible.
Deleting now unused module $paramod\clock_divider_2N\N=2.
Deleting now unused module sign_mask_gen.
Deleting now unused module csr_file.
Deleting now unused module regfile.
Deleting now unused module data_mem.
Deleting now unused module instruction_memory.
Deleting now unused module control.
Deleting now unused module imm_gen.
Deleting now unused module branch_predictor.
Deleting now unused module ForwardingUnit.
Deleting now unused module branch_decision.
Deleting now unused module program_counter.
Deleting now unused module alu.
Deleting now unused module mem_wb.
Deleting now unused module ex_mem.
Deleting now unused module id_ex.
Deleting now unused module if_id.
Deleting now unused module ALUControl.
Deleting now unused module mux2to1.
Deleting now unused module cpu.
Deleting now unused module adder.

20.5. Executing TRIBUF pass.

20.6. Executing DEMINOUT pass (demote inout ports to input or output).

20.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~52 debug messages>

20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 200 unused wires.
<suppressed ~1 debug messages>

20.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

20.10. Executing OPT pass (performing simple optimizations).

20.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~282 debug messages>
Removed a total of 94 cells.

20.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$762.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$771.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$773.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$787.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$789.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$802.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$810.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$812.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$826.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$837.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$851.
    dead port 2/2 on $mux $techmap\processor.alu_control.$procmux$867.
Removed 12 multiplexer ports.
<suppressed ~50 debug messages>

20.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\processor.ControlAndStatus_registers.$procmux$650:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279
      New ports: A=1'0, B=1'1, Y=$techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0]
      New connections: $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [31:1] = { $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] $techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_EN[31:0]$279 [0] }
    New ctrl vector for $pmux cell $techmap\processor.alu_control.$procmux$793: { $techmap\processor.alu_control.$procmux$788_CMP $techmap\processor.alu_control.$procmux$800_CMP $auto$opt_reduce.cc:134:opt_mux$917 $techmap\processor.alu_control.$procmux$797_CMP $techmap\processor.alu_control.$procmux$772_CMP $techmap\processor.alu_control.$procmux$795_CMP $techmap\processor.alu_control.$procmux$794_CMP }
    New ctrl vector for $pmux cell $techmap\processor.alu_control.$procmux$817: { $techmap\processor.alu_control.$procmux$788_CMP $auto$opt_reduce.cc:134:opt_mux$919 $techmap\processor.alu_control.$procmux$797_CMP $techmap\processor.alu_control.$procmux$795_CMP $techmap\processor.alu_control.$procmux$794_CMP $techmap\processor.alu_control.$procmux$800_CMP $techmap\processor.alu_control.$procmux$772_CMP }
    New ctrl vector for $pmux cell $techmap\processor.alu_control.$procmux$833: $auto$opt_reduce.cc:134:opt_mux$921
    New ctrl vector for $pmux cell $techmap\processor.alu_control.$procmux$845: $auto$opt_reduce.cc:134:opt_mux$923
    New ctrl vector for $pmux cell $techmap\processor.alu_control.$procmux$870: { $auto$opt_reduce.cc:134:opt_mux$925 $techmap\processor.alu_control.$procmux$868_CMP $techmap\processor.alu_control.$procmux$852_CMP $techmap\processor.alu_control.$procmux$838_CMP $techmap\processor.alu_control.$procmux$813_CMP $techmap\processor.alu_control.$procmux$774_CMP $techmap\processor.alu_control.$procmux$763_CMP }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$procmux$662:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238
      New ports: A=1'0, B=1'1, Y=$techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0]
      New connections: $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [31:1] = { $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] $techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_EN[31:0]$238 [0] }
    New ctrl vector for $pmux cell $techmap\processor.alu_main.$procmux$743: { $techmap\processor.alu_main.$procmux$755_CMP $techmap\processor.alu_main.$procmux$753_CMP $techmap\processor.alu_main.$procmux$752_CMP $techmap\processor.alu_main.$procmux$751_CMP $techmap\processor.alu_main.$procmux$750_CMP $techmap\processor.alu_main.$procmux$749_CMP $techmap\processor.alu_main.$procmux$748_CMP $techmap\processor.alu_main.$procmux$747_CMP $techmap\processor.alu_main.$procmux$746_CMP $auto$opt_reduce.cc:134:opt_mux$927 $techmap\processor.alu_main.$procmux$744_CMP }
    New ctrl vector for $pmux cell $techmap\data_mem_inst.$procmux$697: { $techmap\data_mem_inst.$procmux$672_CMP $techmap\data_mem_inst.$procmux$696_CMP $auto$opt_reduce.cc:134:opt_mux$929 }
    New ctrl vector for $pmux cell $techmap\processor.immediate_generator.$procmux$723: { $techmap\processor.immediate_generator.$procmux$729_CMP $techmap\processor.immediate_generator.$procmux$728_CMP $auto$opt_reduce.cc:134:opt_mux$931 $techmap\processor.immediate_generator.$procmux$725_CMP $techmap\processor.immediate_generator.$procmux$724_CMP }
    New ctrl vector for $pmux cell $techmap\data_mem_inst.$procmux$709: { $techmap\data_mem_inst.$procmux$672_CMP $auto$opt_reduce.cc:134:opt_mux$933 }
    Consolidated identical input bits for $mux cell $techmap\processor.register_files.$procmux$656:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256
      New ports: A=1'0, B=1'1, Y=$techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0]
      New connections: $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [31:1] = { $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] $techmap\processor.register_files.$0$memwr$\regfile$verilog/register_file.v:97$252_EN[31:0]$256 [0] }
  Optimizing cells in module \top.
Performed a total of 12 changes.

20.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

20.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 109 unused wires.
<suppressed ~1 debug messages>

20.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.10.9. Rerunning OPT passes. (Maybe there is more to do..)

20.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~51 debug messages>

20.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.10.16. Finished OPT passes. (There is nothing left to do.)

20.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 22 address bits (of 32) from memory init port top.$techmap\data_mem_inst.$meminit$\data_block$verilog/data_mem.v:0$247 (data_mem_inst.data_block).
Removed top 22 address bits (of 32) from memory read port top.$techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$242 (data_mem_inst.data_block).
Removed top 22 address bits (of 32) from memory write port top.$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$248 (data_mem_inst.data_block).
Removed top 22 address bits (of 32) from memory init port top.$techmap\inst_mem.$meminit$\instruction_memory$verilog/instruction_mem_new.v:0$163 (inst_mem.instruction_memory).
Removed top 22 address bits (of 32) from memory read port top.$techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem_new.v:20$161 (inst_mem.instruction_memory).
Removed top 2 address bits (of 12) from memory read port top.$techmap\processor.ControlAndStatus_registers.$memrd$\csr_file$verilog/CSR.v:61$280 (processor.ControlAndStatus_registers.csr_file).
Removed top 2 address bits (of 12) from memory write port top.$techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:0$281 (processor.ControlAndStatus_registers.csr_file).
Removed top 27 address bits (of 32) from memory init port top.$techmap\processor.register_files.$meminit$\regfile$verilog/register_file.v:0$272 (processor.register_files.regfile).
Removed top 31 bits (of 32) from port B of cell top.$techmap\clk_div.$add$verilog/clock_divider.v:28$636 ($add).
Removed top 28 bits (of 32) from port Y of cell top.$techmap\clk_div.$add$verilog/clock_divider.v:28$636 ($add).
Removed top 3 bits (of 4) from port B of cell top.$techmap\clk_div.$eq$verilog/clock_divider.v:27$635 ($eq).
Removed top 31 bits (of 32) from FF cell top.$techmap\data_mem_inst.$procdff$906 ($dff).
Removed top 22 bits (of 32) from FF cell top.$techmap\data_mem_inst.$procdff$904 ($dff).
Removed top 30 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$699_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$696_CMP0 ($eq).
Removed cell top.$techmap\data_mem_inst.$procmux$666 ($mux).
Removed cell top.$techmap\data_mem_inst.$procmux$664 ($mux).
Removed top 30 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$procmux$663_CMP0 ($eq).
Removed top 19 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:261$243 ($sub).
Removed top 22 bits (of 32) from port Y of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:261$243 ($sub).
Removed top 12 bits (of 13) from port B of cell top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:261$243 ($sub).
Removed top 18 bits (of 32) from port B of cell top.$techmap\data_mem_inst.$eq$verilog/data_mem.v:232$233 ($eq).
Removed top 29 bits (of 32) from port A of cell top.$techmap\processor.pc_adder.$add$verilog/adder.v:53$1 ($add).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$728_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$727_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$techmap\processor.immediate_generator.$procmux$726_CMP0 ($eq).
Removed top 1 bits (of 32) from mux cell top.$techmap\processor.immediate_generator.$procmux$723 ($pmux).
Removed top 21 bits (of 32) from mux cell top.$techmap\processor.cont_mux.$ternary$verilog/mux2to1.v:50$7 ($mux).
Removed top 27 bits (of 32) from mux cell top.$techmap\processor.RegB_AddrFwdFlush_mux.$ternary$verilog/mux2to1.v:50$7 ($mux).
Removed top 27 bits (of 32) from mux cell top.$techmap\processor.RegA_AddrFwdFlush_mux.$ternary$verilog/mux2to1.v:50$7 ($mux).
Removed top 31 bits (of 32) from FF cell top.$techmap\processor.ControlAndStatus_registers.$procdff$884 ($dff).
Removed top 2 bits (of 12) from FF cell top.$techmap\processor.ControlAndStatus_registers.$procdff$882 ($dff).
Removed cell top.$techmap\processor.ControlAndStatus_registers.$procmux$654 ($mux).
Removed cell top.$techmap\processor.ControlAndStatus_registers.$procmux$652 ($mux).
Removed top 31 bits (of 32) from FF cell top.$techmap\processor.register_files.$procdff$894 ($dff).
Removed top 27 bits (of 32) from FF cell top.$techmap\processor.register_files.$procdff$889 ($dff).
Removed cell top.$techmap\processor.register_files.$procmux$660 ($mux).
Removed cell top.$techmap\processor.register_files.$procmux$658 ($mux).
Removed top 27 bits (of 32) from port A of cell top.$techmap\processor.register_files.$eq$verilog/register_file.v:109$267 ($eq).
Removed top 27 bits (of 32) from port A of cell top.$techmap\processor.register_files.$eq$verilog/register_file.v:108$262 ($eq).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$878_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$877_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$852_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$845 ($mux).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$838_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$833 ($mux).
Removed top 2 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$813_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$800_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$799_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_control.$procmux$798_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$784 ($pmux).
Removed top 1 bits (of 7) from port B of cell top.$techmap\processor.alu_control.$procmux$774_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$768 ($pmux).
Removed top 1 bits (of 2) from port B of cell top.$techmap\processor.alu_control.$procmux$761_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell top.$techmap\processor.alu_control.$procmux$758 ($pmux).
Removed top 3 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$754_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$753_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$752_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$751_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$750_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$749_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\processor.alu_main.$procmux$748_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$procmux$741_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$procmux$740_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\processor.alu_main.$procmux$739_CMP0 ($eq).
Removed top 31 bits (of 32) from mux cell top.$techmap\processor.alu_main.$ternary$verilog/alu.v:103$24 ($mux).
Removed top 23 bits (of 32) from mux cell top.$techmap\processor.ex_cont_mux.$ternary$verilog/mux2to1.v:50$7 ($mux).
Removed top 28 bits (of 32) from wire top.$techmap\clk_div.$add$verilog/clock_divider.v:28$636_Y.
Removed top 22 bits (of 32) from wire top.$techmap\data_mem_inst.$0$memwr$\data_block$verilog/data_mem.v:283$166_ADDR[31:0]$236.
Removed top 22 bits (of 32) from wire top.$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:283$166_ADDR.
Removed top 22 bits (of 32) from wire top.$techmap\data_mem_inst.$sub$verilog/data_mem.v:261$243_Y.
Removed top 2 bits (of 12) from wire top.$techmap\processor.ControlAndStatus_registers.$0$memwr$\csr_file$verilog/CSR.v:59$275_ADDR[11:0]$277.
Removed top 2 bits (of 12) from wire top.$techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:59$275_ADDR.
Removed top 12 bits (of 32) from wire top.$techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:59$275_DATA.
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire top.$techmap\processor.alu_control.$3\ALUCtl[6:0].
Removed top 5 bits (of 7) from wire top.$techmap\processor.alu_control.$4\ALUCtl[6:0].
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$6\ALUCtl[6:0].
Removed top 4 bits (of 7) from wire top.$techmap\processor.alu_control.$8\ALUCtl[6:0].
Removed top 31 bits (of 32) from wire top.$techmap\processor.alu_main.$ternary$verilog/alu.v:103$24_Y.
Removed top 27 bits (of 32) from wire top.processor.RegA_AddrFwdFlush_mux.input0.
Removed top 27 bits (of 32) from wire top.processor.RegA_AddrFwdFlush_mux.out.
Removed top 27 bits (of 32) from wire top.processor.RegA_mux.input1.
Removed top 27 bits (of 32) from wire top.processor.RegB_AddrFwdFlush_mux.input0.
Removed top 27 bits (of 32) from wire top.processor.RegB_AddrFwdFlush_mux.out.
Removed top 21 bits (of 32) from wire top.processor.cont_mux.input0.
Removed top 21 bits (of 32) from wire top.processor.cont_mux.out.
Removed top 23 bits (of 32) from wire top.processor.ex_cont_mux.input0.
Removed top 23 bits (of 32) from wire top.processor.ex_cont_mux.out.
Removed top 3 bits (of 155) from wire top.processor.ex_mem_reg.data_in.
Removed top 10 bits (of 12) from wire top.processor.forwarding_unit.EX_CSRR_Addr.
Removed top 10 bits (of 178) from wire top.processor.id_ex_out.
Removed top 27 bits (of 32) from wire top.processor.register_files.wrAddr_buf.
Removed top 3 bits (of 32) from wire top.processor.wb_fwd1_mux.out.
Removed top 6 bits (of 32) from wire top.processor.wb_fwd1_mux_out.

20.12. Executing PEEPOPT pass (run peephole optimizers).

20.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 34 unused wires.
<suppressed ~1 debug messages>

20.14. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module top that may be considered for resource sharing.
  Analyzing resource sharing options for $techmap\processor.alu_main.$sshr$verilog/alu.v:113$26 ($sshr):
    Found 3 activation_patterns using ctrl signal { $techmap\processor.alu_main.$procmux$740_CMP $techmap\processor.alu_main.$procmux$741_CMP $techmap\processor.alu_main.$procmux$749_CMP \processor.id_ex_reg.data_out [9] }.
    No candidates found.
  Analyzing resource sharing options for $techmap\processor.alu_main.$shr$verilog/alu.v:108$25 ($shr):
    Found 3 activation_patterns using ctrl signal { $techmap\processor.alu_main.$procmux$740_CMP $techmap\processor.alu_main.$procmux$741_CMP $techmap\processor.alu_main.$procmux$750_CMP \processor.id_ex_reg.data_out [9] }.
    No candidates found.
  Analyzing resource sharing options for $techmap\processor.alu_main.$shl$verilog/alu.v:118$27 ($shl):
    Found 3 activation_patterns using ctrl signal { $techmap\processor.alu_main.$procmux$740_CMP $techmap\processor.alu_main.$procmux$741_CMP $techmap\processor.alu_main.$procmux$748_CMP \processor.id_ex_reg.data_out [9] }.
    No candidates found.
  Analyzing resource sharing options for $techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$242 ($memrd):
    Found 1 activation_patterns using ctrl signal $techmap\data_mem_inst.$procmux$696_CMP.
    No candidates found.

20.15. Executing TECHMAP pass (map to technology primitives).

20.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

20.15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~108 debug messages>

20.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

20.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

20.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap\clk_div.$add$verilog/clock_divider.v:28$636 ($add).
  creating $macc model for $techmap\processor.addr_adder.$add$verilog/adder.v:53$1 ($add).
  creating $macc model for $techmap\processor.alu_main.$add$verilog/alu.v:93$21 ($add).
  creating $macc model for $techmap\processor.alu_main.$sub$verilog/alu.v:98$22 ($sub).
  creating $macc model for $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:108$99 ($add).
  creating $macc model for $techmap\processor.pc_adder.$add$verilog/adder.v:53$1 ($add).
  creating $alu model for $macc $techmap\processor.pc_adder.$add$verilog/adder.v:53$1.
  creating $alu model for $macc $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:108$99.
  creating $alu model for $macc $techmap\processor.alu_main.$sub$verilog/alu.v:98$22.
  creating $alu model for $macc $techmap\processor.alu_main.$add$verilog/alu.v:93$21.
  creating $alu model for $macc $techmap\processor.addr_adder.$add$verilog/adder.v:53$1.
  creating $alu model for $macc $techmap\clk_div.$add$verilog/clock_divider.v:28$636.
  creating $alu model for $techmap\processor.alu_main.$ge$verilog/alu.v:152$37 ($ge): new $alu
  creating $alu model for $techmap\processor.alu_main.$ge$verilog/alu.v:154$39 ($ge): merged with $techmap\processor.alu_main.$sub$verilog/alu.v:98$22.
  creating $alu model for $techmap\processor.alu_main.$lt$verilog/alu.v:103$23 ($lt): merged with $techmap\processor.alu_main.$ge$verilog/alu.v:152$37.
  creating $alu model for $techmap\processor.alu_main.$lt$verilog/alu.v:153$38 ($lt): merged with $techmap\processor.alu_main.$sub$verilog/alu.v:98$22.
  creating $alu cell for $techmap\clk_div.$add$verilog/clock_divider.v:28$636: $auto$alumacc.cc:485:replace_alu$963
  creating $alu cell for $techmap\processor.addr_adder.$add$verilog/adder.v:53$1: $auto$alumacc.cc:485:replace_alu$966
  creating $alu cell for $techmap\processor.alu_main.$ge$verilog/alu.v:152$37, $techmap\processor.alu_main.$lt$verilog/alu.v:103$23: $auto$alumacc.cc:485:replace_alu$969
  creating $alu cell for $techmap\processor.alu_main.$add$verilog/alu.v:93$21: $auto$alumacc.cc:485:replace_alu$984
  creating $alu cell for $techmap\processor.alu_main.$sub$verilog/alu.v:98$22, $techmap\processor.alu_main.$ge$verilog/alu.v:154$39, $techmap\processor.alu_main.$lt$verilog/alu.v:153$38: $auto$alumacc.cc:485:replace_alu$987
  creating $alu cell for $techmap\processor.branch_predictor_FSM.$add$verilog/branch_predictor.v:108$99: $auto$alumacc.cc:485:replace_alu$1000
  creating $alu cell for $techmap\processor.pc_adder.$add$verilog/adder.v:53$1: $auto$alumacc.cc:485:replace_alu$1003
  created 7 $alu and 0 $macc cells.

20.19. Executing OPT pass (performing simple optimizations).

20.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

20.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

20.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

20.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.19.9. Rerunning OPT passes. (Maybe there is more to do..)

20.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~46 debug messages>

20.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.19.16. Finished OPT passes. (There is nothing left to do.)

20.20. Executing FSM pass (extract and optimize FSM).

20.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.data_mem_inst.state as FSM state register:
    Register has an initialization value.

20.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

20.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

20.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

20.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

20.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

20.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

20.21. Executing OPT pass (performing simple optimizations).

20.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.21.5. Finished fast OPT passes.

20.22. Executing MEMORY pass.

20.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

20.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$248' in module `\top': merged $dff to cell.
Checking cell `$techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:0$281' in module `\top': merged $dff to cell.
Checking cell `$techmap\processor.register_files.$memwr$\regfile$verilog/register_file.v:0$273' in module `\top': merged $dff to cell.
Checking cell `$techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$242' in module `\top': merged data $dff with rd enable to cell.
Checking cell `$techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem_new.v:20$161' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.ControlAndStatus_registers.$memrd$\csr_file$verilog/CSR.v:61$280' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:104$260' in module `\top': merged data $dff to cell.
Checking cell `$techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:105$261' in module `\top': merged data $dff to cell.

20.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 14 unused cells and 19 unused wires.
<suppressed ~16 debug messages>

20.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

20.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\data_mem_inst.data_block' in module `\top':
  $techmap\data_mem_inst.$meminit$\data_block$verilog/data_mem.v:0$247 ($meminit)
  $techmap\data_mem_inst.$memwr$\data_block$verilog/data_mem.v:0$248 ($memwr)
  $techmap\data_mem_inst.$memrd$\data_block$verilog/data_mem.v:261$242 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\inst_mem.instruction_memory' in module `\top':
  $techmap\inst_mem.$meminit$\instruction_memory$verilog/instruction_mem_new.v:0$163 ($meminit)
  $techmap\inst_mem.$memrd$\instruction_memory$verilog/instruction_mem_new.v:20$161 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\processor.ControlAndStatus_registers.csr_file' in module `\top':
  $techmap\processor.ControlAndStatus_registers.$memwr$\csr_file$verilog/CSR.v:0$281 ($memwr)
  $techmap\processor.ControlAndStatus_registers.$memrd$\csr_file$verilog/CSR.v:61$280 ($memrd)
Collecting $memrd, $memwr and $meminit for memory `\processor.register_files.regfile' in module `\top':
  $techmap\processor.register_files.$meminit$\regfile$verilog/register_file.v:0$272 ($meminit)
  $techmap\processor.register_files.$memwr$\regfile$verilog/register_file.v:0$273 ($memwr)
  $techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:105$261 ($memrd)
  $techmap\processor.register_files.$memrd$\regfile$verilog/register_file.v:104$260 ($memrd)

20.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing top.data_mem_inst.data_block:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_div.clk_out.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: data_mem_inst.data_block.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: data_mem_inst.data_block.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: data_mem_inst.data_block.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: data_mem_inst.data_block.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: data_mem_inst.data_block.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: data_mem_inst.data_block.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: data_mem_inst.data_block.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: data_mem_inst.data_block.7.0.0
Processing top.inst_mem.instruction_memory:
  Properties: ports=1 bits=32768 rports=1 wports=0 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'min wports 1' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min wports 1' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_romstyle="ebr" ...' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: inst_mem.instruction_memory.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: inst_mem.instruction_memory.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: inst_mem.instruction_memory.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: inst_mem.instruction_memory.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: inst_mem.instruction_memory.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: inst_mem.instruction_memory.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: inst_mem.instruction_memory.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: inst_mem.instruction_memory.7.0.0
Processing top.processor.ControlAndStatus_registers.csr_file:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: processor.ControlAndStatus_registers.csr_file.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: processor.ControlAndStatus_registers.csr_file.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: processor.ControlAndStatus_registers.csr_file.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: processor.ControlAndStatus_registers.csr_file.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: processor.ControlAndStatus_registers.csr_file.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: processor.ControlAndStatus_registers.csr_file.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: processor.ControlAndStatus_registers.csr_file.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: processor.ControlAndStatus_registers.csr_file.7.0.0
Processing top.processor.register_files.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk_proc.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk_proc.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk_proc.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: processor.register_files.regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: processor.register_files.regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: processor.register_files.regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: processor.register_files.regfile.1.0.1

20.25. Executing TECHMAP pass (map to technology primitives).

20.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

20.25.2. Continuing TECHMAP pass.
Using template $paramod\$__ICE40_RAM4K_M123\CFG_ABITS=10\CFG_DBITS=4\CLKPOL2=1\CLKPOL3=1 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$ee338b437991470233af7a84b55b37defcaac296\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$888b11ad643423fad4124737d430b30d071e76c5\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$f40b41ed01e4edcf07af4d0a3bcd82a7638e29a5\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$dcf558e0a52d53744752e11f4caadc67566eb728\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$96730f2979e4ec5e6048c90567de94ce5992570a\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$393e15b5e00bc13490e1ef7bc58db2210e872efb\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$217499091a3e8258001631e1cb6d921fcb715b38\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$9322ce62a67371c6276d16fac2d95cf3694ebe42\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$7c01128c47821c00041f4149da79e5374eeb90af\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$1d8f31ba647830b3cf268a83409ed2fbc24aa924\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$b1969f3746fa16fb5c79f0db0972870ab2b51d07\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$25e237c46ed050be0d4e770e026595a020cd0fc8\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$da3c7878040e8ca4ef0dce62b8cea858bb503ae9\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$808c4ffc3af2893d23a154b6f89c524e2698c21c\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$3ddbdb953a677f809182dd36935d717d2cdb0c66\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$55976fa431d00d916e4cc349ebb8c767a6abec12\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$0ebeabc03b314c1f58b345584c0f3d48bde60c83\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$960485841f660243af450c42d6b4560e3d9823f2\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$e960588dacff89b8f882c5a0277b8c8d527c9965\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$c627afcf99922150bea99dfd202f51f330026882\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$071f02249dad81b315ad801809edf76aa20f7e76\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$40fef072c71f32368800528bb866969918f45ad4\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$61a1acdfedf8180e397937ff14dd0d4ae125c25e\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$04590b1c0ad951b467387fa50f06eed86cffb2a0\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$6b1aed27008580900f145b31eb5ead97cb45f703\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$953f48acbf3dc1bfa5c58aa7014d4a544f040b44\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$d5070268d5bb8fc23c4cc63974544bf8804d7014\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$6f4dc0cd3afe34139e925dfc011d512bf5e38ff3\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$4e1abbec753908b9e31be16353c6f649ece28986\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$fea0615c67e0fd592c8e25f0e136394aabe19257\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$946c23209575eb2e29f5e3cd55741eb215fc1554\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$15ec9b0438b51e9a93a843e594277b338a0497c0\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$aea7d710ae000a98a74ee63c9d104bec3d17b96a\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$b66c30d47722f77f21dffff36647d8456b50bb51\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$2d6113b3d225f43c78ca19de2be7bd4451250b9c\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~1258 debug messages>

20.26. Executing ICE40_BRAMINIT pass.

20.27. Executing OPT pass (performing simple optimizations).

20.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~217 debug messages>

20.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

20.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 683 unused wires.
<suppressed ~2 debug messages>

20.27.5. Finished fast OPT passes.

20.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

20.29. Executing OPT pass (performing simple optimizations).

20.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~40 debug messages>

20.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [15:8] }, B={ \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15:8] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [15], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] \data_mem_inst.word_buf [15:8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [7:0] }, B={ \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7] \data_mem_inst.word_buf [7:0] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [7], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] \data_mem_inst.word_buf [7:0] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [31:24] }, B={ \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31:24] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [31], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] \data_mem_inst.word_buf [31:24] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220:
      Old ports: A={ 24'000000000000000000000000 \data_mem_inst.word_buf [23:16] }, B={ \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23] \data_mem_inst.word_buf [23:16] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [23], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [31:9] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [7:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] \data_mem_inst.word_buf [23:16] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223:
      Old ports: A={ 16'0000000000000000 \data_mem_inst.word_buf [31:16] }, B={ \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31] \data_mem_inst.word_buf [31:16] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [31], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [31:17] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [15:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] \data_mem_inst.word_buf [31:16] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225:
      Old ports: A={ 16'0000000000000000 \data_mem_inst.word_buf [15:0] }, B={ \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15] \data_mem_inst.word_buf [15:0] }, Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y
      New ports: A=1'0, B=\data_mem_inst.word_buf [15], Y=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16]
      New connections: { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [31:17] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [15:0] } = { $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] \data_mem_inst.word_buf [15:0] }
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$768:
      Old ports: A=3'011, B=3'100, Y=$auto$wreduce.cc:460:run$944 [2:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:460:run$944 [2] $auto$wreduce.cc:460:run$944 [0] }
      New connections: $auto$wreduce.cc:460:run$944 [1] = $auto$wreduce.cc:460:run$944 [0]
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$784:
      Old ports: A=3'010, B=3'110, Y=$auto$wreduce.cc:460:run$945 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:460:run$945 [2]
      New connections: $auto$wreduce.cc:460:run$945 [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $techmap\processor.alu_control.$procmux$793:
      Old ports: A={ 4'0000 $auto$wreduce.cc:460:run$945 [2:0] }, B={ 25'0000101000011100010000000 $auto$wreduce.cc:460:run$944 [2:0] 14'00000010000000 }, Y=$techmap\processor.alu_control.$7\ALUCtl[6:0]
      New ports: A={ 1'0 $auto$wreduce.cc:460:run$945 [2:0] }, B={ 13'0101011110000 $auto$wreduce.cc:460:run$944 [2:0] 8'00010000 }, Y=$techmap\processor.alu_control.$7\ALUCtl[6:0] [3:0]
      New connections: $techmap\processor.alu_control.$7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $pmux cell $techmap\processor.alu_control.$procmux$817:
      Old ports: A=7'0000010, B={ 39'000011100010000000001000000000001010000 $auto$wreduce.cc:460:run$944 [2:0] }, Y=$techmap\processor.alu_control.$5\ALUCtl[6:0]
      New ports: A=4'0010, B={ 21'011110000001000001010 $auto$wreduce.cc:460:run$944 [2:0] }, Y=$techmap\processor.alu_control.$5\ALUCtl[6:0] [3:0]
      New connections: $techmap\processor.alu_control.$5\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$833:
      Old ports: A=4'1111, B=4'0010, Y=$auto$wreduce.cc:460:run$943 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:460:run$943 [0]
      New connections: $auto$wreduce.cc:460:run$943 [3:1] = { $auto$wreduce.cc:460:run$943 [0] $auto$wreduce.cc:460:run$943 [0] 1'1 }
    Consolidated identical input bits for $mux cell $techmap\processor.alu_control.$procmux$845:
      Old ports: A=4'1111, B=4'0010, Y=$auto$wreduce.cc:460:run$942 [3:0]
      New ports: A=1'1, B=1'0, Y=$auto$wreduce.cc:460:run$942 [0]
      New connections: $auto$wreduce.cc:460:run$942 [3:1] = { $auto$wreduce.cc:460:run$942 [0] $auto$wreduce.cc:460:run$942 [0] 1'1 }
    Consolidated identical input bits for $pmux cell $techmap\processor.alu_control.$procmux$860:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$techmap\processor.alu_control.$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $techmap\processor.alu_control.$2\ALUCtl[6:0] [6:4] $techmap\processor.alu_control.$2\ALUCtl[6:0] [0] }
      New connections: $techmap\processor.alu_control.$2\ALUCtl[6:0] [3:1] = { $techmap\processor.alu_control.$2\ALUCtl[6:0] [0] 2'11 }
    Consolidated identical input bits for $mux cell $techmap\processor.fence_mux.$ternary$verilog/mux2to1.v:50$7:
      Old ports: A={ \processor.fence_mux.input0 [31:2] \processor.PC.outAddr [1:0] }, B=\processor.PC.outAddr, Y=\processor.branch_predictor_mux.input0
      New ports: A=\processor.fence_mux.input0 [31:2], B=\processor.PC.outAddr [31:2], Y=\processor.branch_predictor_mux.input0 [31:2]
      New connections: \processor.branch_predictor_mux.input0 [1:0] = \processor.PC.outAddr [1:0]
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$216:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y, Y=\data_mem_inst.out1
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$215_Y [8] \data_mem_inst.word_buf [7:0] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:204$213_Y [8] \data_mem_inst.word_buf [15:8] }, Y=\data_mem_inst.out1 [8:0]
      New connections: \data_mem_inst.out1 [31:9] = { \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] \data_mem_inst.out1 [8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$221:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y, Y=\data_mem_inst.out2
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$220_Y [8] \data_mem_inst.word_buf [23:16] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:205$218_Y [8] \data_mem_inst.word_buf [31:24] }, Y=\data_mem_inst.out2 [8:0]
      New connections: \data_mem_inst.out2 [31:9] = { \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] \data_mem_inst.out2 [8] }
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$226:
      Old ports: A=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y, B=$techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y, Y=\data_mem_inst.out3
      New ports: A={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$225_Y [16] \data_mem_inst.word_buf [15:0] }, B={ $techmap\data_mem_inst.$ternary$verilog/data_mem.v:206$223_Y [16] \data_mem_inst.word_buf [31:16] }, Y=\data_mem_inst.out3 [16:0]
      New connections: \data_mem_inst.out3 [31:17] = { \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] \data_mem_inst.out3 [16] }
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\data_mem_inst.$ternary$verilog/data_mem.v:209$228:
      Old ports: A=\data_mem_inst.out1, B=\data_mem_inst.out2, Y=\data_mem_inst.out5
      New ports: A=\data_mem_inst.out1 [8:0], B=\data_mem_inst.out2 [8:0], Y=\data_mem_inst.out5 [8:0]
      New connections: \data_mem_inst.out5 [31:9] = { \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] \data_mem_inst.out5 [8] }
  Optimizing cells in module \top.
Performed a total of 18 changes.

20.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

20.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

20.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.29.9. Rerunning OPT passes. (Maybe there is more to do..)

20.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~42 debug messages>

20.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

20.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.29.16. Finished OPT passes. (There is nothing left to do.)

20.30. Executing ICE40_WRAPCARRY pass (wrap carries).

20.31. Executing TECHMAP pass (map to technology primitives).

20.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

20.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

20.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=31\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=30\Y_WIDTH=30 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=11 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~1876 debug messages>

20.32. Executing OPT pass (performing simple optimizations).

20.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~978 debug messages>

20.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~1758 debug messages>
Removed a total of 586 cells.

20.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

20.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 290 unused cells and 768 unused wires.
<suppressed ~291 debug messages>

20.32.5. Finished fast OPT passes.

20.33. Executing ICE40_OPT pass (performing simple optimizations).

20.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$1003.slice[0].carry: CO=\processor.PC.outAddr [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$963.slice[0].carry: CO=\clk_div.count [0]

20.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~84 debug messages>

20.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

20.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.33.6. Rerunning OPT passes. (Removed registers in this run.)

20.33.7. Running ICE40 specific optimizations.

20.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

20.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.33.12. Finished OPT passes. (There is nothing left to do.)

20.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1179 to $_DFFE_PP_ for $techmap\clk_div.$0\clk_out[0:0] -> \clk_div.clk_out.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1284 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [0] -> \data_mem_inst.led_reg [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1285 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [1] -> \data_mem_inst.led_reg [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1286 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [2] -> \data_mem_inst.led_reg [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1287 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [3] -> \data_mem_inst.led_reg [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1288 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [4] -> \data_mem_inst.led_reg [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1289 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [5] -> \data_mem_inst.led_reg [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1290 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [6] -> \data_mem_inst.led_reg [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1291 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\led_reg[31:0] [7] -> \data_mem_inst.led_reg [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1317 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [1] -> \data_mem_inst.sign_mask_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1318 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [2] -> \data_mem_inst.sign_mask_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1319 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\sign_mask_buf[3:0] [3] -> \data_mem_inst.sign_mask_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1320 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [0] -> \data_mem_inst.addr_buf [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1321 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [1] -> \data_mem_inst.addr_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1322 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [2] -> \data_mem_inst.addr_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1323 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [3] -> \data_mem_inst.addr_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1324 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [4] -> \data_mem_inst.addr_buf [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1325 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [5] -> \data_mem_inst.addr_buf [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1326 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [6] -> \data_mem_inst.addr_buf [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1327 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [7] -> \data_mem_inst.addr_buf [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1328 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [8] -> \data_mem_inst.addr_buf [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1329 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [9] -> \data_mem_inst.addr_buf [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1330 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [10] -> \data_mem_inst.addr_buf [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1331 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\addr_buf[31:0] [11] -> \data_mem_inst.addr_buf [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1352 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [0] -> \data_mem_inst.write_data_buffer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1353 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [1] -> \data_mem_inst.write_data_buffer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1354 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [2] -> \data_mem_inst.write_data_buffer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1355 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [3] -> \data_mem_inst.write_data_buffer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1356 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [4] -> \data_mem_inst.write_data_buffer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1357 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [5] -> \data_mem_inst.write_data_buffer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1358 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [6] -> \data_mem_inst.write_data_buffer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1359 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [7] -> \data_mem_inst.write_data_buffer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1360 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [8] -> \data_mem_inst.write_data_buffer [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1361 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [9] -> \data_mem_inst.write_data_buffer [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1362 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [10] -> \data_mem_inst.write_data_buffer [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1363 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [11] -> \data_mem_inst.write_data_buffer [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1364 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [12] -> \data_mem_inst.write_data_buffer [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1365 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [13] -> \data_mem_inst.write_data_buffer [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1366 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [14] -> \data_mem_inst.write_data_buffer [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1367 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [15] -> \data_mem_inst.write_data_buffer [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1368 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [16] -> \data_mem_inst.write_data_buffer [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1369 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [17] -> \data_mem_inst.write_data_buffer [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1370 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [18] -> \data_mem_inst.write_data_buffer [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1371 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [19] -> \data_mem_inst.write_data_buffer [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1372 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [20] -> \data_mem_inst.write_data_buffer [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1373 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [21] -> \data_mem_inst.write_data_buffer [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1374 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [22] -> \data_mem_inst.write_data_buffer [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1375 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [23] -> \data_mem_inst.write_data_buffer [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1376 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [24] -> \data_mem_inst.write_data_buffer [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1377 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [25] -> \data_mem_inst.write_data_buffer [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1378 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [26] -> \data_mem_inst.write_data_buffer [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1379 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [27] -> \data_mem_inst.write_data_buffer [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1380 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [28] -> \data_mem_inst.write_data_buffer [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1381 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [29] -> \data_mem_inst.write_data_buffer [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1382 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [30] -> \data_mem_inst.write_data_buffer [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1383 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\write_data_buffer[31:0] [31] -> \data_mem_inst.write_data_buffer [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1384 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\memwrite_buf[0:0] -> \data_mem_inst.memwrite_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1385 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\memread_buf[0:0] -> \data_mem_inst.memread_buf.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1386 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [0] -> \data_mem_inst.state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1387 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [1] -> \data_mem_inst.state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1388 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [2] -> \data_mem_inst.state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1389 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [3] -> \data_mem_inst.state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1390 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [4] -> \data_mem_inst.state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1391 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [5] -> \data_mem_inst.state [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1392 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [6] -> \data_mem_inst.state [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1393 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [7] -> \data_mem_inst.state [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1394 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [8] -> \data_mem_inst.state [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1395 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [9] -> \data_mem_inst.state [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1396 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [10] -> \data_mem_inst.state [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1397 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [11] -> \data_mem_inst.state [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1398 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [12] -> \data_mem_inst.state [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1399 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [13] -> \data_mem_inst.state [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1400 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [14] -> \data_mem_inst.state [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1401 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [15] -> \data_mem_inst.state [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1402 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [16] -> \data_mem_inst.state [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1403 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [17] -> \data_mem_inst.state [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1404 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [18] -> \data_mem_inst.state [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1405 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [19] -> \data_mem_inst.state [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1406 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [20] -> \data_mem_inst.state [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1407 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [21] -> \data_mem_inst.state [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1408 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [22] -> \data_mem_inst.state [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1409 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [23] -> \data_mem_inst.state [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1410 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [24] -> \data_mem_inst.state [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1411 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [25] -> \data_mem_inst.state [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1412 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [26] -> \data_mem_inst.state [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1413 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [27] -> \data_mem_inst.state [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1414 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [28] -> \data_mem_inst.state [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1415 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [29] -> \data_mem_inst.state [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1416 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [30] -> \data_mem_inst.state [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1417 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$697.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1692_Y [31] -> \data_mem_inst.state [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1418 to $_DFFE_PP_ for $techmap$techmap\data_mem_inst.$procmux$709.$ternary$/usr/local/bin/../share/yosys/techmap.v:480$1517_Y -> \data_mem_inst.clk_stall.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1419 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [0] -> \data_mem_inst.read_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1420 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [1] -> \data_mem_inst.read_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1421 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [2] -> \data_mem_inst.read_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1422 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [3] -> \data_mem_inst.read_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1423 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [4] -> \data_mem_inst.read_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1424 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [5] -> \data_mem_inst.read_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1425 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [6] -> \data_mem_inst.read_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1426 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [7] -> \data_mem_inst.read_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1427 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [8] -> \data_mem_inst.read_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1428 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [9] -> \data_mem_inst.read_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1429 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [10] -> \data_mem_inst.read_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1430 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [11] -> \data_mem_inst.read_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1431 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [12] -> \data_mem_inst.read_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1432 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [13] -> \data_mem_inst.read_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1433 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [14] -> \data_mem_inst.read_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1434 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [15] -> \data_mem_inst.read_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1435 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [16] -> \data_mem_inst.read_data [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1436 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [17] -> \data_mem_inst.read_data [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1437 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [18] -> \data_mem_inst.read_data [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1438 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [19] -> \data_mem_inst.read_data [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1439 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [20] -> \data_mem_inst.read_data [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1440 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [21] -> \data_mem_inst.read_data [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1441 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [22] -> \data_mem_inst.read_data [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1442 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [23] -> \data_mem_inst.read_data [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1443 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [24] -> \data_mem_inst.read_data [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1444 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [25] -> \data_mem_inst.read_data [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1445 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [26] -> \data_mem_inst.read_data [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1446 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [27] -> \data_mem_inst.read_data [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1447 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [28] -> \data_mem_inst.read_data [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1448 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [29] -> \data_mem_inst.read_data [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1449 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [30] -> \data_mem_inst.read_data [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1450 to $_DFFE_PP_ for $techmap\data_mem_inst.$0\read_data[31:0] [31] -> \data_mem_inst.read_data [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2712 to $_DFFE_PP_ for \processor.PC.inAddr [0] -> \processor.PC.outAddr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2713 to $_DFFE_PP_ for \processor.PC.inAddr [1] -> \processor.PC.outAddr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2714 to $_DFFE_PP_ for \processor.PC.inAddr [2] -> \processor.PC.outAddr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2715 to $_DFFE_PP_ for \processor.PC.inAddr [3] -> \processor.PC.outAddr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2716 to $_DFFE_PP_ for \processor.PC.inAddr [4] -> \processor.PC.outAddr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2717 to $_DFFE_PP_ for \processor.PC.inAddr [5] -> \processor.PC.outAddr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2718 to $_DFFE_PP_ for \processor.PC.inAddr [6] -> \processor.PC.outAddr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2719 to $_DFFE_PP_ for \processor.PC.inAddr [7] -> \processor.PC.outAddr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2720 to $_DFFE_PP_ for \processor.PC.inAddr [8] -> \processor.PC.outAddr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2721 to $_DFFE_PP_ for \processor.PC.inAddr [9] -> \processor.PC.outAddr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2722 to $_DFFE_PP_ for \processor.PC.inAddr [10] -> \processor.PC.outAddr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2723 to $_DFFE_PP_ for \processor.PC.inAddr [11] -> \processor.PC.outAddr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2724 to $_DFFE_PP_ for \processor.PC.inAddr [12] -> \processor.PC.outAddr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2725 to $_DFFE_PP_ for \processor.PC.inAddr [13] -> \processor.PC.outAddr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2726 to $_DFFE_PP_ for \processor.PC.inAddr [14] -> \processor.PC.outAddr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2727 to $_DFFE_PP_ for \processor.PC.inAddr [15] -> \processor.PC.outAddr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2728 to $_DFFE_PP_ for \processor.PC.inAddr [16] -> \processor.PC.outAddr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2729 to $_DFFE_PP_ for \processor.PC.inAddr [17] -> \processor.PC.outAddr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2730 to $_DFFE_PP_ for \processor.PC.inAddr [18] -> \processor.PC.outAddr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2731 to $_DFFE_PP_ for \processor.PC.inAddr [19] -> \processor.PC.outAddr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2732 to $_DFFE_PP_ for \processor.PC.inAddr [20] -> \processor.PC.outAddr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2733 to $_DFFE_PP_ for \processor.PC.inAddr [21] -> \processor.PC.outAddr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2734 to $_DFFE_PP_ for \processor.PC.inAddr [22] -> \processor.PC.outAddr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2735 to $_DFFE_PP_ for \processor.PC.inAddr [23] -> \processor.PC.outAddr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2736 to $_DFFE_PP_ for \processor.PC.inAddr [24] -> \processor.PC.outAddr [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2737 to $_DFFE_PP_ for \processor.PC.inAddr [25] -> \processor.PC.outAddr [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2738 to $_DFFE_PP_ for \processor.PC.inAddr [26] -> \processor.PC.outAddr [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2739 to $_DFFE_PP_ for \processor.PC.inAddr [27] -> \processor.PC.outAddr [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2740 to $_DFFE_PP_ for \processor.PC.inAddr [28] -> \processor.PC.outAddr [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2741 to $_DFFE_PP_ for \processor.PC.inAddr [29] -> \processor.PC.outAddr [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2742 to $_DFFE_PP_ for \processor.PC.inAddr [30] -> \processor.PC.outAddr [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2743 to $_DFFE_PP_ for \processor.PC.inAddr [31] -> \processor.PC.outAddr [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2948 to $_DFFE_PP_ for $techmap\processor.branch_predictor_FSM.$0\s[1:0] [0] -> \processor.branch_predictor_FSM.s [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2949 to $_DFFE_PP_ for $techmap\processor.branch_predictor_FSM.$0\s[1:0] [1] -> \processor.branch_predictor_FSM.s [1].

20.35. Executing TECHMAP pass (map to technology primitives).

20.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

20.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
No more expansions possible.
<suppressed ~687 debug messages>

20.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~408 debug messages>

20.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$1003.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$963.slice[0].carry ($lut).

20.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6358 (SB_DFF): \processor.ex_mem_reg.data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1178 (SB_DFF): \clk_div.count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1176 (SB_DFF): \clk_div.count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1177 (SB_DFF): \clk_div.count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1404 (SB_DFFE): \data_mem_inst.state [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1388 (SB_DFFE): \data_mem_inst.state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1400 (SB_DFFE): \data_mem_inst.state [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1175 (SB_DFF): \clk_div.count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1412 (SB_DFFE): \data_mem_inst.state [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1391 (SB_DFFE): \data_mem_inst.state [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1389 (SB_DFFE): \data_mem_inst.state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1387 (SB_DFFE): \data_mem_inst.state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1390 (SB_DFFE): \data_mem_inst.state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1403 (SB_DFFE): \data_mem_inst.state [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1401 (SB_DFFE): \data_mem_inst.state [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1392 (SB_DFFE): \data_mem_inst.state [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1397 (SB_DFFE): \data_mem_inst.state [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1398 (SB_DFFE): \data_mem_inst.state [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1399 (SB_DFFE): \data_mem_inst.state [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1395 (SB_DFFE): \data_mem_inst.state [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1402 (SB_DFFE): \data_mem_inst.state [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1394 (SB_DFFE): \data_mem_inst.state [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1415 (SB_DFFE): \data_mem_inst.state [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1413 (SB_DFFE): \data_mem_inst.state [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1409 (SB_DFFE): \data_mem_inst.state [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1410 (SB_DFFE): \data_mem_inst.state [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1411 (SB_DFFE): \data_mem_inst.state [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1407 (SB_DFFE): \data_mem_inst.state [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1414 (SB_DFFE): \data_mem_inst.state [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1406 (SB_DFFE): \data_mem_inst.state [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1386 (SB_DFFE): \data_mem_inst.state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1418 (SB_DFFE): \data_mem_inst.clk_stall = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2423 (SB_DFF): \processor.mem_wb_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1416 (SB_DFFE): \data_mem_inst.state [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1393 (SB_DFFE): \data_mem_inst.state [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2948 (SB_DFFE): \processor.branch_predictor_FSM.s [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1405 (SB_DFFE): \data_mem_inst.state [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2947 (SB_DFFN): \processor.branch_predictor_FSM.branch_mem_sig_reg = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2744 (SB_DFF): \processor.if_id_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6222 (SB_DFF): \processor.ex_mem_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6223 (SB_DFF): \processor.ex_mem_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6224 (SB_DFF): \processor.ex_mem_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6295 (SB_DFF): \processor.ex_mem_reg.data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6296 (SB_DFF): \processor.ex_mem_reg.data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6297 (SB_DFF): \processor.ex_mem_reg.data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6298 (SB_DFF): \processor.ex_mem_reg.data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6299 (SB_DFF): \processor.ex_mem_reg.data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6300 (SB_DFF): \processor.ex_mem_reg.data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6301 (SB_DFF): \processor.ex_mem_reg.data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6302 (SB_DFF): \processor.ex_mem_reg.data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6303 (SB_DFF): \processor.ex_mem_reg.data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6304 (SB_DFF): \processor.ex_mem_reg.data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6305 (SB_DFF): \processor.ex_mem_reg.data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6306 (SB_DFF): \processor.ex_mem_reg.data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6307 (SB_DFF): \processor.ex_mem_reg.data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6308 (SB_DFF): \processor.ex_mem_reg.data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6309 (SB_DFF): \processor.ex_mem_reg.data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6310 (SB_DFF): \processor.ex_mem_reg.data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6311 (SB_DFF): \processor.ex_mem_reg.data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6312 (SB_DFF): \processor.ex_mem_reg.data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6313 (SB_DFF): \processor.ex_mem_reg.data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6314 (SB_DFF): \processor.ex_mem_reg.data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6315 (SB_DFF): \processor.ex_mem_reg.data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6316 (SB_DFF): \processor.ex_mem_reg.data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6317 (SB_DFF): \processor.ex_mem_reg.data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6318 (SB_DFF): \processor.ex_mem_reg.data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6319 (SB_DFF): \processor.ex_mem_reg.data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6320 (SB_DFF): \processor.ex_mem_reg.data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6321 (SB_DFF): \processor.ex_mem_reg.data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6322 (SB_DFF): \processor.ex_mem_reg.data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6323 (SB_DFF): \processor.ex_mem_reg.data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6324 (SB_DFF): \processor.ex_mem_reg.data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6325 (SB_DFF): \processor.ex_mem_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6326 (SB_DFF): \processor.ex_mem_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2456 (SB_DFF): \processor.mem_wb_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2457 (SB_DFF): \processor.mem_wb_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2458 (SB_DFF): \processor.mem_wb_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2459 (SB_DFF): \processor.mem_wb_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2460 (SB_DFF): \processor.mem_wb_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2461 (SB_DFF): \processor.mem_wb_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2462 (SB_DFF): \processor.mem_wb_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2463 (SB_DFF): \processor.mem_wb_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2464 (SB_DFF): \processor.mem_wb_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2465 (SB_DFF): \processor.mem_wb_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2466 (SB_DFF): \processor.mem_wb_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2467 (SB_DFF): \processor.mem_wb_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2468 (SB_DFF): \processor.mem_wb_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2469 (SB_DFF): \processor.mem_wb_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2470 (SB_DFF): \processor.mem_wb_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2471 (SB_DFF): \processor.mem_wb_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2472 (SB_DFF): \processor.mem_wb_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2473 (SB_DFF): \processor.mem_wb_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2474 (SB_DFF): \processor.mem_wb_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2475 (SB_DFF): \processor.mem_wb_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2476 (SB_DFF): \processor.mem_wb_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2477 (SB_DFF): \processor.mem_wb_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2478 (SB_DFF): \processor.mem_wb_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2479 (SB_DFF): \processor.mem_wb_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2480 (SB_DFF): \processor.mem_wb_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2481 (SB_DFF): \processor.mem_wb_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2482 (SB_DFF): \processor.mem_wb_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2483 (SB_DFF): \processor.mem_wb_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2484 (SB_DFF): \processor.mem_wb_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2485 (SB_DFF): \processor.mem_wb_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2486 (SB_DFF): \processor.mem_wb_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2487 (SB_DFF): \processor.mem_wb_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2488 (SB_DFF): \processor.mem_wb_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2489 (SB_DFF): \processor.mem_wb_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2490 (SB_DFF): \processor.mem_wb_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2491 (SB_DFF): \processor.mem_wb_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2492 (SB_DFF): \processor.mem_wb_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2493 (SB_DFF): \processor.mem_wb_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2494 (SB_DFF): \processor.mem_wb_reg.data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2495 (SB_DFF): \processor.mem_wb_reg.data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2496 (SB_DFF): \processor.mem_wb_reg.data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2497 (SB_DFF): \processor.mem_wb_reg.data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2498 (SB_DFF): \processor.mem_wb_reg.data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2499 (SB_DFF): \processor.mem_wb_reg.data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2500 (SB_DFF): \processor.mem_wb_reg.data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2501 (SB_DFF): \processor.mem_wb_reg.data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2502 (SB_DFF): \processor.mem_wb_reg.data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2503 (SB_DFF): \processor.mem_wb_reg.data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2504 (SB_DFF): \processor.mem_wb_reg.data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2505 (SB_DFF): \processor.mem_wb_reg.data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2506 (SB_DFF): \processor.mem_wb_reg.data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2507 (SB_DFF): \processor.mem_wb_reg.data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2508 (SB_DFF): \processor.mem_wb_reg.data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2509 (SB_DFF): \processor.mem_wb_reg.data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2510 (SB_DFF): \processor.mem_wb_reg.data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2511 (SB_DFF): \processor.mem_wb_reg.data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2512 (SB_DFF): \processor.mem_wb_reg.data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2513 (SB_DFF): \processor.mem_wb_reg.data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2514 (SB_DFF): \processor.mem_wb_reg.data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2515 (SB_DFF): \processor.mem_wb_reg.data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2516 (SB_DFF): \processor.mem_wb_reg.data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2517 (SB_DFF): \processor.mem_wb_reg.data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2518 (SB_DFF): \processor.mem_wb_reg.data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2519 (SB_DFF): \processor.mem_wb_reg.data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2520 (SB_DFF): \processor.mem_wb_reg.data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6360 (SB_DFF): \processor.ex_mem_reg.data_out [139] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6361 (SB_DFF): \processor.ex_mem_reg.data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6362 (SB_DFF): \processor.ex_mem_reg.data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6363 (SB_DFF): \processor.ex_mem_reg.data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6364 (SB_DFF): \processor.ex_mem_reg.data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6365 (SB_DFF): \processor.ex_mem_reg.data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6366 (SB_DFF): \processor.ex_mem_reg.data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6367 (SB_DFF): \processor.ex_mem_reg.data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6368 (SB_DFF): \processor.ex_mem_reg.data_out [147] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6369 (SB_DFF): \processor.ex_mem_reg.data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6370 (SB_DFF): \processor.ex_mem_reg.data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6371 (SB_DFF): \processor.ex_mem_reg.data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6372 (SB_DFF): \processor.ex_mem_reg.data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6373 (SB_DFF): \processor.ex_mem_reg.data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6374 (SB_DFF): \processor.ex_mem_reg.data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6375 (SB_DFF): \processor.ex_mem_reg.data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2537 (SB_DFF): \processor.mem_wb_reg.data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2713 (SB_DFFE): \processor.PC.outAddr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2714 (SB_DFFE): \processor.PC.outAddr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2715 (SB_DFFE): \processor.PC.outAddr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2716 (SB_DFFE): \processor.PC.outAddr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2717 (SB_DFFE): \processor.PC.outAddr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2718 (SB_DFFE): \processor.PC.outAddr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2719 (SB_DFFE): \processor.PC.outAddr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2720 (SB_DFFE): \processor.PC.outAddr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2721 (SB_DFFE): \processor.PC.outAddr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2722 (SB_DFFE): \processor.PC.outAddr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2723 (SB_DFFE): \processor.PC.outAddr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2724 (SB_DFFE): \processor.PC.outAddr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2725 (SB_DFFE): \processor.PC.outAddr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2726 (SB_DFFE): \processor.PC.outAddr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2727 (SB_DFFE): \processor.PC.outAddr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2728 (SB_DFFE): \processor.PC.outAddr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2729 (SB_DFFE): \processor.PC.outAddr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2730 (SB_DFFE): \processor.PC.outAddr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2731 (SB_DFFE): \processor.PC.outAddr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2732 (SB_DFFE): \processor.PC.outAddr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2733 (SB_DFFE): \processor.PC.outAddr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2734 (SB_DFFE): \processor.PC.outAddr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2735 (SB_DFFE): \processor.PC.outAddr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2736 (SB_DFFE): \processor.PC.outAddr [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2737 (SB_DFFE): \processor.PC.outAddr [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2738 (SB_DFFE): \processor.PC.outAddr [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2739 (SB_DFFE): \processor.PC.outAddr [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2740 (SB_DFFE): \processor.PC.outAddr [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2741 (SB_DFFE): \processor.PC.outAddr [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2742 (SB_DFFE): \processor.PC.outAddr [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2712 (SB_DFFE): \processor.PC.outAddr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2743 (SB_DFFE): \processor.PC.outAddr [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2745 (SB_DFF): \processor.if_id_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2746 (SB_DFF): \processor.if_id_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2747 (SB_DFF): \processor.if_id_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2748 (SB_DFF): \processor.if_id_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2749 (SB_DFF): \processor.if_id_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2750 (SB_DFF): \processor.if_id_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2751 (SB_DFF): \processor.if_id_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2752 (SB_DFF): \processor.if_id_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2753 (SB_DFF): \processor.if_id_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2754 (SB_DFF): \processor.if_id_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2755 (SB_DFF): \processor.if_id_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2756 (SB_DFF): \processor.if_id_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2757 (SB_DFF): \processor.if_id_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2758 (SB_DFF): \processor.if_id_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2759 (SB_DFF): \processor.if_id_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2760 (SB_DFF): \processor.if_id_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2761 (SB_DFF): \processor.if_id_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2762 (SB_DFF): \processor.if_id_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2763 (SB_DFF): \processor.if_id_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2764 (SB_DFF): \processor.if_id_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2765 (SB_DFF): \processor.if_id_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2766 (SB_DFF): \processor.if_id_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2767 (SB_DFF): \processor.if_id_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2768 (SB_DFF): \processor.if_id_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2769 (SB_DFF): \processor.if_id_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2770 (SB_DFF): \processor.if_id_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2771 (SB_DFF): \processor.if_id_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2772 (SB_DFF): \processor.if_id_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2773 (SB_DFF): \processor.if_id_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2774 (SB_DFF): \processor.if_id_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2775 (SB_DFF): \processor.if_id_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2776 (SB_DFF): \processor.if_id_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2777 (SB_DFF): \processor.if_id_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2778 (SB_DFF): \processor.if_id_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2779 (SB_DFF): \processor.if_id_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2780 (SB_DFF): \processor.if_id_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2781 (SB_DFF): \processor.if_id_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2521 (SB_DFF): \processor.mem_wb_reg.data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2522 (SB_DFF): \processor.mem_wb_reg.data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2523 (SB_DFF): \processor.mem_wb_reg.data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2524 (SB_DFF): \processor.mem_wb_reg.data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2782 (SB_DFF): \processor.if_id_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2788 (SB_DFF): \processor.if_id_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2789 (SB_DFF): \processor.if_id_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2790 (SB_DFF): \processor.if_id_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2791 (SB_DFF): \processor.if_id_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2792 (SB_DFF): \processor.if_id_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2793 (SB_DFF): \processor.if_id_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2794 (SB_DFF): \processor.if_id_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2525 (SB_DFF): \processor.mem_wb_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2526 (SB_DFF): \processor.mem_wb_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2527 (SB_DFF): \processor.mem_wb_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2528 (SB_DFF): \processor.mem_wb_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2529 (SB_DFF): \processor.mem_wb_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2530 (SB_DFF): \processor.mem_wb_reg.data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2531 (SB_DFF): \processor.mem_wb_reg.data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2532 (SB_DFF): \processor.mem_wb_reg.data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2533 (SB_DFF): \processor.mem_wb_reg.data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2534 (SB_DFF): \processor.mem_wb_reg.data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2535 (SB_DFF): \processor.mem_wb_reg.data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2536 (SB_DFF): \processor.mem_wb_reg.data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6227 (SB_DFF): \processor.ex_mem_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2795 (SB_DFF): \processor.if_id_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1408 (SB_DFFE): \data_mem_inst.state [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2949 (SB_DFFE): \processor.branch_predictor_FSM.s [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6359 (SB_DFF): \processor.ex_mem_reg.data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1396 (SB_DFFE): \data_mem_inst.state [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3639 (SB_DFF): \processor.id_ex_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3640 (SB_DFF): \processor.id_ex_reg.data_out [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3641 (SB_DFF): \processor.id_ex_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3642 (SB_DFF): \processor.id_ex_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3643 (SB_DFF): \processor.id_ex_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3644 (SB_DFF): \processor.id_ex_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3645 (SB_DFF): \processor.id_ex_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3646 (SB_DFF): \processor.id_ex_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3647 (SB_DFF): \processor.id_ex_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3648 (SB_DFF): \processor.id_ex_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3649 (SB_DFF): \processor.id_ex_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3650 (SB_DFF): \processor.id_ex_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3651 (SB_DFF): \processor.id_ex_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3652 (SB_DFF): \processor.id_ex_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3653 (SB_DFF): \processor.id_ex_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3654 (SB_DFF): \processor.id_ex_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3655 (SB_DFF): \processor.id_ex_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3656 (SB_DFF): \processor.id_ex_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3657 (SB_DFF): \processor.id_ex_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3658 (SB_DFF): \processor.id_ex_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3659 (SB_DFF): \processor.id_ex_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3660 (SB_DFF): \processor.id_ex_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3661 (SB_DFF): \processor.id_ex_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3662 (SB_DFF): \processor.id_ex_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3663 (SB_DFF): \processor.id_ex_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3664 (SB_DFF): \processor.id_ex_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3665 (SB_DFF): \processor.id_ex_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3666 (SB_DFF): \processor.id_ex_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3667 (SB_DFF): \processor.id_ex_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3668 (SB_DFF): \processor.id_ex_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3669 (SB_DFF): \processor.id_ex_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3670 (SB_DFF): \processor.id_ex_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3671 (SB_DFF): \processor.id_ex_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3672 (SB_DFF): \processor.id_ex_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3673 (SB_DFF): \processor.id_ex_reg.data_out [35] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3674 (SB_DFF): \processor.id_ex_reg.data_out [36] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3675 (SB_DFF): \processor.id_ex_reg.data_out [37] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3676 (SB_DFF): \processor.id_ex_reg.data_out [38] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3677 (SB_DFF): \processor.id_ex_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3678 (SB_DFF): \processor.id_ex_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3679 (SB_DFF): \processor.id_ex_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3680 (SB_DFF): \processor.id_ex_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3681 (SB_DFF): \processor.id_ex_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3682 (SB_DFF): \processor.id_ex_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3683 (SB_DFF): \processor.id_ex_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3684 (SB_DFF): \processor.id_ex_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3685 (SB_DFF): \processor.id_ex_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3686 (SB_DFF): \processor.id_ex_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3687 (SB_DFF): \processor.id_ex_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3688 (SB_DFF): \processor.id_ex_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3689 (SB_DFF): \processor.id_ex_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3690 (SB_DFF): \processor.id_ex_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3691 (SB_DFF): \processor.id_ex_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3692 (SB_DFF): \processor.id_ex_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3693 (SB_DFF): \processor.id_ex_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3694 (SB_DFF): \processor.id_ex_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3695 (SB_DFF): \processor.id_ex_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3696 (SB_DFF): \processor.id_ex_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3697 (SB_DFF): \processor.id_ex_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3698 (SB_DFF): \processor.id_ex_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3699 (SB_DFF): \processor.id_ex_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3700 (SB_DFF): \processor.id_ex_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3701 (SB_DFF): \processor.id_ex_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3702 (SB_DFF): \processor.id_ex_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3703 (SB_DFF): \processor.id_ex_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3704 (SB_DFF): \processor.id_ex_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3705 (SB_DFF): \processor.id_ex_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3706 (SB_DFF): \processor.id_ex_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3707 (SB_DFF): \processor.id_ex_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3708 (SB_DFF): \processor.id_ex_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3709 (SB_DFF): \processor.id_ex_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3710 (SB_DFF): \processor.id_ex_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3711 (SB_DFF): \processor.id_ex_reg.data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3712 (SB_DFF): \processor.id_ex_reg.data_out [74] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3713 (SB_DFF): \processor.id_ex_reg.data_out [75] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3714 (SB_DFF): \processor.id_ex_reg.data_out [76] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3715 (SB_DFF): \processor.id_ex_reg.data_out [77] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3716 (SB_DFF): \processor.id_ex_reg.data_out [78] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3717 (SB_DFF): \processor.id_ex_reg.data_out [79] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3718 (SB_DFF): \processor.id_ex_reg.data_out [80] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3719 (SB_DFF): \processor.id_ex_reg.data_out [81] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3720 (SB_DFF): \processor.id_ex_reg.data_out [82] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3721 (SB_DFF): \processor.id_ex_reg.data_out [83] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3722 (SB_DFF): \processor.id_ex_reg.data_out [84] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3723 (SB_DFF): \processor.id_ex_reg.data_out [85] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3724 (SB_DFF): \processor.id_ex_reg.data_out [86] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3725 (SB_DFF): \processor.id_ex_reg.data_out [87] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3726 (SB_DFF): \processor.id_ex_reg.data_out [88] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3727 (SB_DFF): \processor.id_ex_reg.data_out [89] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3728 (SB_DFF): \processor.id_ex_reg.data_out [90] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3729 (SB_DFF): \processor.id_ex_reg.data_out [91] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3730 (SB_DFF): \processor.id_ex_reg.data_out [92] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3731 (SB_DFF): \processor.id_ex_reg.data_out [93] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3732 (SB_DFF): \processor.id_ex_reg.data_out [94] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3733 (SB_DFF): \processor.id_ex_reg.data_out [95] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3734 (SB_DFF): \processor.id_ex_reg.data_out [96] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3735 (SB_DFF): \processor.id_ex_reg.data_out [97] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3736 (SB_DFF): \processor.id_ex_reg.data_out [98] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3737 (SB_DFF): \processor.id_ex_reg.data_out [99] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3738 (SB_DFF): \processor.id_ex_reg.data_out [100] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3739 (SB_DFF): \processor.id_ex_reg.data_out [101] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3740 (SB_DFF): \processor.id_ex_reg.data_out [102] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3741 (SB_DFF): \processor.id_ex_reg.data_out [103] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3742 (SB_DFF): \processor.id_ex_reg.data_out [104] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3743 (SB_DFF): \processor.id_ex_reg.data_out [105] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3744 (SB_DFF): \processor.id_ex_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3745 (SB_DFF): \processor.id_ex_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3746 (SB_DFF): \processor.id_ex_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3747 (SB_DFF): \processor.id_ex_reg.data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3748 (SB_DFF): \processor.id_ex_reg.data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3749 (SB_DFF): \processor.id_ex_reg.data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3750 (SB_DFF): \processor.id_ex_reg.data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3751 (SB_DFF): \processor.id_ex_reg.data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3752 (SB_DFF): \processor.id_ex_reg.data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3753 (SB_DFF): \processor.id_ex_reg.data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3754 (SB_DFF): \processor.id_ex_reg.data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3755 (SB_DFF): \processor.id_ex_reg.data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3756 (SB_DFF): \processor.id_ex_reg.data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3757 (SB_DFF): \processor.id_ex_reg.data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3758 (SB_DFF): \processor.id_ex_reg.data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3759 (SB_DFF): \processor.id_ex_reg.data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3760 (SB_DFF): \processor.id_ex_reg.data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3761 (SB_DFF): \processor.id_ex_reg.data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3762 (SB_DFF): \processor.id_ex_reg.data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3763 (SB_DFF): \processor.id_ex_reg.data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3764 (SB_DFF): \processor.id_ex_reg.data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3765 (SB_DFF): \processor.id_ex_reg.data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3766 (SB_DFF): \processor.id_ex_reg.data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3767 (SB_DFF): \processor.id_ex_reg.data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3768 (SB_DFF): \processor.id_ex_reg.data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3769 (SB_DFF): \processor.id_ex_reg.data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3770 (SB_DFF): \processor.id_ex_reg.data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3771 (SB_DFF): \processor.id_ex_reg.data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3772 (SB_DFF): \processor.id_ex_reg.data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3773 (SB_DFF): \processor.id_ex_reg.data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3774 (SB_DFF): \processor.id_ex_reg.data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3775 (SB_DFF): \processor.id_ex_reg.data_out [137] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2807 (SB_DFF): \processor.if_id_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3776 (SB_DFF): \processor.id_ex_reg.data_out [138] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3778 (SB_DFF): \processor.id_ex_reg.data_out [140] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3779 (SB_DFF): \processor.id_ex_reg.data_out [141] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3780 (SB_DFF): \processor.id_ex_reg.data_out [142] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3781 (SB_DFF): \processor.id_ex_reg.data_out [143] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3782 (SB_DFF): \processor.id_ex_reg.data_out [144] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3783 (SB_DFF): \processor.id_ex_reg.data_out [145] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3784 (SB_DFF): \processor.id_ex_reg.data_out [146] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3786 (SB_DFF): \processor.id_ex_reg.data_out [148] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3787 (SB_DFF): \processor.id_ex_reg.data_out [149] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2783 (SB_DFF): \processor.if_id_reg.data_out [39] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2784 (SB_DFF): \processor.if_id_reg.data_out [40] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2785 (SB_DFF): \processor.if_id_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2786 (SB_DFF): \processor.if_id_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2787 (SB_DFF): \processor.if_id_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3788 (SB_DFF): \processor.id_ex_reg.data_out [150] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3794 (SB_DFF): \processor.id_ex_reg.data_out [156] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3795 (SB_DFF): \processor.id_ex_reg.data_out [157] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3796 (SB_DFF): \processor.id_ex_reg.data_out [158] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3797 (SB_DFF): \processor.id_ex_reg.data_out [159] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3798 (SB_DFF): \processor.id_ex_reg.data_out [160] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3799 (SB_DFF): \processor.id_ex_reg.data_out [161] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3800 (SB_DFF): \processor.id_ex_reg.data_out [162] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3801 (SB_DFF): \processor.id_ex_reg.data_out [163] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3802 (SB_DFF): \processor.id_ex_reg.data_out [164] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2796 (SB_DFF): \processor.if_id_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2797 (SB_DFF): \processor.if_id_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2798 (SB_DFF): \processor.if_id_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2799 (SB_DFF): \processor.if_id_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2800 (SB_DFF): \processor.if_id_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2801 (SB_DFF): \processor.if_id_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2802 (SB_DFF): \processor.if_id_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2803 (SB_DFF): \processor.if_id_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2804 (SB_DFF): \processor.if_id_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2805 (SB_DFF): \processor.if_id_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2806 (SB_DFF): \processor.if_id_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3638 (SB_DFF): \processor.id_ex_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6221 (SB_DFF): \processor.ex_mem_reg.data_out [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2422 (SB_DFF): \processor.mem_wb_reg.data_out [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1417 (SB_DFFE): \data_mem_inst.state [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3803 (SB_DFF): \processor.id_ex_reg.data_out [165] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6228 (SB_DFF): \processor.ex_mem_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6229 (SB_DFF): \processor.ex_mem_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6262 (SB_DFF): \processor.ex_mem_reg.data_out [41] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6263 (SB_DFF): \processor.ex_mem_reg.data_out [42] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6264 (SB_DFF): \processor.ex_mem_reg.data_out [43] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6265 (SB_DFF): \processor.ex_mem_reg.data_out [44] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6266 (SB_DFF): \processor.ex_mem_reg.data_out [45] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6267 (SB_DFF): \processor.ex_mem_reg.data_out [46] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6268 (SB_DFF): \processor.ex_mem_reg.data_out [47] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6269 (SB_DFF): \processor.ex_mem_reg.data_out [48] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6270 (SB_DFF): \processor.ex_mem_reg.data_out [49] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6271 (SB_DFF): \processor.ex_mem_reg.data_out [50] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6272 (SB_DFF): \processor.ex_mem_reg.data_out [51] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6273 (SB_DFF): \processor.ex_mem_reg.data_out [52] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6274 (SB_DFF): \processor.ex_mem_reg.data_out [53] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6275 (SB_DFF): \processor.ex_mem_reg.data_out [54] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6276 (SB_DFF): \processor.ex_mem_reg.data_out [55] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6277 (SB_DFF): \processor.ex_mem_reg.data_out [56] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6278 (SB_DFF): \processor.ex_mem_reg.data_out [57] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6279 (SB_DFF): \processor.ex_mem_reg.data_out [58] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6280 (SB_DFF): \processor.ex_mem_reg.data_out [59] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6281 (SB_DFF): \processor.ex_mem_reg.data_out [60] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6282 (SB_DFF): \processor.ex_mem_reg.data_out [61] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6283 (SB_DFF): \processor.ex_mem_reg.data_out [62] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6284 (SB_DFF): \processor.ex_mem_reg.data_out [63] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6285 (SB_DFF): \processor.ex_mem_reg.data_out [64] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6286 (SB_DFF): \processor.ex_mem_reg.data_out [65] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6287 (SB_DFF): \processor.ex_mem_reg.data_out [66] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6288 (SB_DFF): \processor.ex_mem_reg.data_out [67] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6289 (SB_DFF): \processor.ex_mem_reg.data_out [68] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6290 (SB_DFF): \processor.ex_mem_reg.data_out [69] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6291 (SB_DFF): \processor.ex_mem_reg.data_out [70] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6292 (SB_DFF): \processor.ex_mem_reg.data_out [71] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6293 (SB_DFF): \processor.ex_mem_reg.data_out [72] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2424 (SB_DFF): \processor.mem_wb_reg.data_out [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2425 (SB_DFF): \processor.mem_wb_reg.data_out [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2426 (SB_DFF): \processor.mem_wb_reg.data_out [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2427 (SB_DFF): \processor.mem_wb_reg.data_out [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2428 (SB_DFF): \processor.mem_wb_reg.data_out [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2429 (SB_DFF): \processor.mem_wb_reg.data_out [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2430 (SB_DFF): \processor.mem_wb_reg.data_out [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2431 (SB_DFF): \processor.mem_wb_reg.data_out [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2432 (SB_DFF): \processor.mem_wb_reg.data_out [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2433 (SB_DFF): \processor.mem_wb_reg.data_out [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2434 (SB_DFF): \processor.mem_wb_reg.data_out [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2435 (SB_DFF): \processor.mem_wb_reg.data_out [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2436 (SB_DFF): \processor.mem_wb_reg.data_out [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2437 (SB_DFF): \processor.mem_wb_reg.data_out [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2438 (SB_DFF): \processor.mem_wb_reg.data_out [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2439 (SB_DFF): \processor.mem_wb_reg.data_out [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2440 (SB_DFF): \processor.mem_wb_reg.data_out [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2441 (SB_DFF): \processor.mem_wb_reg.data_out [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2442 (SB_DFF): \processor.mem_wb_reg.data_out [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2443 (SB_DFF): \processor.mem_wb_reg.data_out [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2444 (SB_DFF): \processor.mem_wb_reg.data_out [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2445 (SB_DFF): \processor.mem_wb_reg.data_out [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2446 (SB_DFF): \processor.mem_wb_reg.data_out [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2447 (SB_DFF): \processor.mem_wb_reg.data_out [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2448 (SB_DFF): \processor.mem_wb_reg.data_out [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2449 (SB_DFF): \processor.mem_wb_reg.data_out [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2450 (SB_DFF): \processor.mem_wb_reg.data_out [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2451 (SB_DFF): \processor.mem_wb_reg.data_out [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2452 (SB_DFF): \processor.mem_wb_reg.data_out [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2453 (SB_DFF): \processor.mem_wb_reg.data_out [32] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2454 (SB_DFF): \processor.mem_wb_reg.data_out [33] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$2455 (SB_DFF): \processor.mem_wb_reg.data_out [34] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6294 (SB_DFF): \processor.ex_mem_reg.data_out [73] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6327 (SB_DFF): \processor.ex_mem_reg.data_out [106] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6328 (SB_DFF): \processor.ex_mem_reg.data_out [107] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6329 (SB_DFF): \processor.ex_mem_reg.data_out [108] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6330 (SB_DFF): \processor.ex_mem_reg.data_out [109] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6331 (SB_DFF): \processor.ex_mem_reg.data_out [110] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6332 (SB_DFF): \processor.ex_mem_reg.data_out [111] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6333 (SB_DFF): \processor.ex_mem_reg.data_out [112] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6334 (SB_DFF): \processor.ex_mem_reg.data_out [113] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6335 (SB_DFF): \processor.ex_mem_reg.data_out [114] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6336 (SB_DFF): \processor.ex_mem_reg.data_out [115] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6337 (SB_DFF): \processor.ex_mem_reg.data_out [116] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6338 (SB_DFF): \processor.ex_mem_reg.data_out [117] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6339 (SB_DFF): \processor.ex_mem_reg.data_out [118] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6340 (SB_DFF): \processor.ex_mem_reg.data_out [119] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6341 (SB_DFF): \processor.ex_mem_reg.data_out [120] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6342 (SB_DFF): \processor.ex_mem_reg.data_out [121] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6343 (SB_DFF): \processor.ex_mem_reg.data_out [122] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6344 (SB_DFF): \processor.ex_mem_reg.data_out [123] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6345 (SB_DFF): \processor.ex_mem_reg.data_out [124] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6346 (SB_DFF): \processor.ex_mem_reg.data_out [125] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6347 (SB_DFF): \processor.ex_mem_reg.data_out [126] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6348 (SB_DFF): \processor.ex_mem_reg.data_out [127] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6349 (SB_DFF): \processor.ex_mem_reg.data_out [128] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6350 (SB_DFF): \processor.ex_mem_reg.data_out [129] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6351 (SB_DFF): \processor.ex_mem_reg.data_out [130] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6352 (SB_DFF): \processor.ex_mem_reg.data_out [131] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6353 (SB_DFF): \processor.ex_mem_reg.data_out [132] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6354 (SB_DFF): \processor.ex_mem_reg.data_out [133] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6355 (SB_DFF): \processor.ex_mem_reg.data_out [134] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6356 (SB_DFF): \processor.ex_mem_reg.data_out [135] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$6357 (SB_DFF): \processor.ex_mem_reg.data_out [136] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3789 (SB_DFF): \processor.id_ex_reg.data_out [151] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3790 (SB_DFF): \processor.id_ex_reg.data_out [152] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3791 (SB_DFF): \processor.id_ex_reg.data_out [153] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3792 (SB_DFF): \processor.id_ex_reg.data_out [154] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3793 (SB_DFF): \processor.id_ex_reg.data_out [155] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3804 (SB_DFF): \processor.id_ex_reg.data_out [166] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3805 (SB_DFF): \processor.id_ex_reg.data_out [167] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3806 (SB_DFF): \processor.id_ex_reg.data_out [168] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3807 (SB_DFF): \processor.id_ex_reg.data_out [169] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3808 (SB_DFF): \processor.id_ex_reg.data_out [170] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3809 (SB_DFF): \processor.id_ex_reg.data_out [171] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3810 (SB_DFF): \processor.id_ex_reg.data_out [172] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3811 (SB_DFF): \processor.id_ex_reg.data_out [173] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3812 (SB_DFF): \processor.id_ex_reg.data_out [174] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3813 (SB_DFF): \processor.id_ex_reg.data_out [175] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3814 (SB_DFF): \processor.id_ex_reg.data_out [176] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$3777 (SB_DFF): \processor.id_ex_reg.data_out [139] = 0

20.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1184 (A=1'0, B=$auto$wreduce.cc:460:run$934 [3], S=$auto$simplemap.cc:256:simplemap_eqne$1201) into $auto$simplemap.cc:420:simplemap_dff$1178 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1182 (A=1'0, B=$auto$wreduce.cc:460:run$934 [1], S=$auto$simplemap.cc:256:simplemap_eqne$1201) into $auto$simplemap.cc:420:simplemap_dff$1176 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1183 (A=1'0, B=$auto$wreduce.cc:460:run$934 [2], S=$auto$simplemap.cc:256:simplemap_eqne$1201) into $auto$simplemap.cc:420:simplemap_dff$1177 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1181 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$11331, S=$auto$simplemap.cc:256:simplemap_eqne$1201) into $auto$simplemap.cc:420:simplemap_dff$1175 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2559 (A=\inst_mem.out [15], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3090 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6216 (A=\processor.id_ex_reg.data_out [4], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$1384 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$6217 (A=\processor.id_ex_reg.data_out [5], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$1385 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2564 (A=\inst_mem.out [20], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3085 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6213 (A=\processor.id_ex_reg.data_out [1], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$6222 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6214 (A=\processor.id_ex_reg.data_out [2], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$6223 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6215 (A=\processor.id_ex_reg.data_out [3], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$6224 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2544 (A=\inst_mem.out [0], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2776 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2545 (A=\inst_mem.out [1], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2777 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2546 (A=\inst_mem.out [2], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2778 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2547 (A=\inst_mem.out [3], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2779 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2548 (A=\inst_mem.out [4], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2780 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2549 (A=\inst_mem.out [5], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2781 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2550 (A=\inst_mem.out [6], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2782 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2556 (A=\inst_mem.out [12], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2788 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2557 (A=\inst_mem.out [13], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2789 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2558 (A=\inst_mem.out [14], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2790 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2559 (A=\inst_mem.out [15], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2791 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2560 (A=\inst_mem.out [16], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2792 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2561 (A=\inst_mem.out [17], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2793 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2562 (A=\inst_mem.out [18], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2794 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6218 (A=\processor.id_ex_reg.data_out [6], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$6227 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2563 (A=\inst_mem.out [19], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2795 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2565 (A=\inst_mem.out [21], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3086 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2566 (A=\inst_mem.out [22], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3087 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2567 (A=\inst_mem.out [23], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3088 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2568 (A=\inst_mem.out [24], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3089 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2560 (A=\inst_mem.out [16], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3091 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2561 (A=\inst_mem.out [17], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3092 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2562 (A=\inst_mem.out [18], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3093 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2563 (A=\inst_mem.out [19], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3094 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2937 (A=\processor.MemtoReg1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3639 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2938 (A=\processor.RegWrite1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3640 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2939 (A=\processor.CSRR_signal, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3641 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2940 (A=\processor.MemWrite1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3642 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2941 (A=\processor.MemRead1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3643 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2942 (A=\processor.Branch1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3644 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2943 (A=\processor.Auipc1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3646 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2944 (A=\processor.Lui1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3647 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2945 (A=\processor.ALUSrc1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3648 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2946 (A=\processor.Jalr1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3649 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3244 (A=\processor.RegA_mux.input0 [5], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3687 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3245 (A=\processor.RegA_mux.input0 [6], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3688 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3246 (A=\processor.RegA_mux.input0 [7], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3689 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3247 (A=\processor.RegA_mux.input0 [8], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3690 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3248 (A=\processor.RegA_mux.input0 [9], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3691 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3249 (A=\processor.RegA_mux.input0 [10], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3692 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3250 (A=\processor.RegA_mux.input0 [11], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3693 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3251 (A=\processor.RegA_mux.input0 [12], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3694 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3252 (A=\processor.RegA_mux.input0 [13], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3695 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3253 (A=\processor.RegA_mux.input0 [14], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3696 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3254 (A=\processor.RegA_mux.input0 [15], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3697 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3255 (A=\processor.RegA_mux.input0 [16], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3698 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3256 (A=\processor.RegA_mux.input0 [17], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3699 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3257 (A=\processor.RegA_mux.input0 [18], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3700 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3258 (A=\processor.RegA_mux.input0 [19], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3701 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3259 (A=\processor.RegA_mux.input0 [20], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3702 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3260 (A=\processor.RegA_mux.input0 [21], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3703 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3261 (A=\processor.RegA_mux.input0 [22], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3704 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3262 (A=\processor.RegA_mux.input0 [23], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3705 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3263 (A=\processor.RegA_mux.input0 [24], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3706 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3264 (A=\processor.RegA_mux.input0 [25], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3707 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3265 (A=\processor.RegA_mux.input0 [26], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3708 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3266 (A=\processor.RegA_mux.input0 [27], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3709 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3267 (A=\processor.RegA_mux.input0 [28], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3710 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3268 (A=\processor.RegA_mux.input0 [29], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3711 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3269 (A=\processor.RegA_mux.input0 [30], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3712 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3270 (A=\processor.RegA_mux.input0 [31], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3713 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2575 (A=\inst_mem.out [31], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2807 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7719 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3351_Y, S=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3342_Y) into $auto$simplemap.cc:420:simplemap_dff$3778 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7720 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3352_Y, S=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3342_Y) into $auto$simplemap.cc:420:simplemap_dff$3779 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7721 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3353_Y, S=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3342_Y) into $auto$simplemap.cc:420:simplemap_dff$3780 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7722 (A=1'1, B=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3354_Y, S=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3342_Y) into $auto$simplemap.cc:420:simplemap_dff$3781 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7723 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7625 [2], S=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3342_Y) into $auto$simplemap.cc:420:simplemap_dff$3782 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7724 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7616 [2], S=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3342_Y) into $auto$simplemap.cc:420:simplemap_dff$3783 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7725 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7607 [2], S=$techmap$techmap\processor.alu_control.$procmux$870.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$3342_Y) into $auto$simplemap.cc:420:simplemap_dff$3784 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7369 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7351, S=$techmap$techmap\processor.sign_mask_gen_inst.$procmux$646.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3279_Y) into $auto$simplemap.cc:420:simplemap_dff$3786 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$7370 (A=1'0, B=$auto$simplemap.cc:127:simplemap_reduce$7347, S=$techmap$techmap\processor.sign_mask_gen_inst.$procmux$646.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$3279_Y) into $auto$simplemap.cc:420:simplemap_dff$3787 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2551 (A=\inst_mem.out [7], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2783 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2552 (A=\inst_mem.out [8], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2784 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2553 (A=\inst_mem.out [9], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2785 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2554 (A=\inst_mem.out [10], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2786 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2555 (A=\inst_mem.out [11], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2787 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2971 (A=\processor.if_id_reg.data_out [47], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3794 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2972 (A=\processor.if_id_reg.data_out [48], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3795 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2973 (A=\processor.if_id_reg.data_out [49], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3796 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2974 (A=\processor.if_id_reg.data_out [50], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3797 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2975 (A=\processor.if_id_reg.data_out [51], B=1'0, S=\processor.RegA_AddrFwdFlush_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3798 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2966 (A=\processor.if_id_reg.data_out [52], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3799 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2967 (A=\processor.if_id_reg.data_out [53], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3800 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2968 (A=\processor.if_id_reg.data_out [54], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3801 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2969 (A=\processor.if_id_reg.data_out [55], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3802 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2564 (A=\inst_mem.out [20], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2796 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2565 (A=\inst_mem.out [21], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2797 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2566 (A=\inst_mem.out [22], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2798 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2567 (A=\inst_mem.out [23], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2799 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2568 (A=\inst_mem.out [24], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2800 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2569 (A=\inst_mem.out [25], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2801 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2570 (A=\inst_mem.out [26], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2802 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2571 (A=\inst_mem.out [27], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2803 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2572 (A=\inst_mem.out [28], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2804 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2573 (A=\inst_mem.out [29], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2805 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2574 (A=\inst_mem.out [30], B=1'0, S=\processor.inst_mux.select) into $auto$simplemap.cc:420:simplemap_dff$2806 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2936 (A=\processor.Jump1, B=1'0, S=\processor.cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$3638 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6212 (A=\processor.id_ex_reg.data_out [0], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$6221 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2970 (A=\processor.if_id_reg.data_out [56], B=1'0, S=\processor.CSRR_signal) into $auto$simplemap.cc:420:simplemap_dff$3803 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6219 (A=\processor.id_ex_reg.data_out [7], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$6228 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$6220 (A=\processor.id_ex_reg.data_out [8], B=1'0, S=\processor.ex_cont_mux.select) into $auto$simplemap.cc:420:simplemap_dff$6229 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$8787 (A=1'0, B=$techmap$techmap\processor.alu_main.$procmux$735.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:476$5933_Y, S=$techmap$techmap\processor.alu_main.$procmux$735.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:480$5925_Y) into $auto$simplemap.cc:420:simplemap_dff$6294 (SB_DFF).

20.40. Executing ICE40_OPT pass (performing simple optimizations).

20.40.1. Running ICE40 specific optimizations.

20.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~89 debug messages>

20.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~633 debug messages>
Removed a total of 211 cells.

20.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

20.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 85 unused cells and 2736 unused wires.
<suppressed ~88 debug messages>

20.40.6. Rerunning OPT passes. (Removed registers in this run.)

20.40.7. Running ICE40 specific optimizations.

20.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~92 debug messages>

20.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

20.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.40.12. Rerunning OPT passes. (Removed registers in this run.)

20.40.13. Running ICE40 specific optimizations.

20.40.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

20.40.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

20.40.16. Executing OPT_RMDFF pass (remove dff with constant values).

20.40.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

20.40.18. Finished OPT passes. (There is nothing left to do.)

20.41. Executing TECHMAP pass (map to technology primitives).

20.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

20.41.2. Continuing TECHMAP pass.
No more expansions possible.

20.42. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_FF_'.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Successfully finished Verilog frontend.

20.43. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

20.44. Executing ABC9 pass.

20.44.1. Executing ABC9_OPS pass (helper functions for ABC9).

20.44.2. Executing SCC pass (detecting logic loops).
Found 0 SCCs in module top.
Found 0 SCCs.

20.44.3. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2428 debug messages>

20.44.4. Executing ABC9_OPS pass (helper functions for ABC9).

20.44.5. Executing ABC9_OPS pass (helper functions for ABC9).

20.44.6. Executing FLATTEN pass (flatten design).
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
<suppressed ~7 debug messages>
No more expansions possible.

20.44.7. Executing TECHMAP pass (map to technology primitives).

20.44.7.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

20.44.7.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
No more expansions possible.
<suppressed ~8 debug messages>

20.44.8. Executing OPT pass (performing simple optimizations).

20.44.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.
<suppressed ~4 debug messages>

20.44.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

20.44.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top$holes..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.44.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top$holes.
Performed a total of 0 changes.

20.44.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
Removed a total of 0 cells.

20.44.8.6. Executing OPT_RMDFF pass (remove dff with constant values).

20.44.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top$holes..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

20.44.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.

20.44.8.9. Rerunning OPT passes. (Maybe there is more to do..)

20.44.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top$holes..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.44.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top$holes.
Performed a total of 0 changes.

20.44.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top$holes'.
Removed a total of 0 cells.

20.44.8.13. Executing OPT_RMDFF pass (remove dff with constant values).

20.44.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top$holes..

20.44.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top$holes.

20.44.8.16. Finished OPT passes. (There is nothing left to do.)

20.44.9. Executing AIGMAP pass (map logic to AIG).
Module top: replaced 2401 cells with 14302 new cells, skipped 4191 cells.
  replaced 3 cell types:
     835 $_OR_
     137 $_XOR_
    1429 $_MUX_
  not replaced 12 cell types:
     169 $_NOT_
     690 $_AND_
       1 SB_HFOSC
     192 $__ICE40_CARRY_WRAPPER
     418 SB_DFF
     155 SB_DFFE
     107 SB_DFFSR
       4 SB_DFFSS
       2 SB_DFFESR
       1 SB_DFFN
      28 SB_RAM40_4K
    2424 $__ABC9_DELAY
Module top$holes: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

20.44.9.1. Executing ABC9_OPS pass (helper functions for ABC9).

20.44.9.2. Executing ABC9_OPS pass (helper functions for ABC9).

20.44.9.3. Executing XAIGER backend.
<suppressed ~1148 debug messages>
Extracted 6223 AND gates and 19462 wires from module `top' to a netlist network with 848 inputs and 2444 outputs.

20.44.9.4. Executing ABC9_EXE pass (technology mapping using ABC9).

20.44.9.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    848/   2444  and =    5397  lev =   38 (1.81)  mem = 0.21 MB  box = 2616  bb = 2424
ABC: Warning: AIG with boxes has internal fanout in 0 complex flops and 1 carries.
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    848/   2444  and =    7407  lev =   57 (1.43)  mem = 0.23 MB  ch =  960  box = 2584  bb = 2424
ABC: Warning: AIG with boxes has internal fanout in 0 complex flops and 1 carries.
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    7407.  Ch =   875.  Total mem =    2.29 MB. Peak cut mem =    0.16 MB.
ABC: P:  Del = 11883.00.  Ar =    2025.0.  Edge =     7048.  Cut =    46286.  T =     0.01 sec
ABC: P:  Del = 11883.00.  Ar =    1949.0.  Edge =     7014.  Cut =    42979.  T =     0.01 sec
ABC: P:  Del = 11883.00.  Ar =    1713.0.  Edge =     5624.  Cut =    49050.  T =     0.01 sec
ABC: F:  Del = 11883.00.  Ar =    1619.0.  Edge =     5304.  Cut =    44538.  T =     0.01 sec
ABC: A:  Del = 11883.00.  Ar =    1563.0.  Edge =     5025.  Cut =    42248.  T =     0.01 sec
ABC: A:  Del = 11883.00.  Ar =    1552.0.  Edge =     5011.  Cut =    43053.  T =     0.01 sec
ABC: Total time =     0.05 sec
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    848/   2444  and =    4468  lev =   39 (1.45)  mem = 0.19 MB  box = 2584  bb = 2424
ABC: Mapping (K=4)  :  lut =   1552  edge =    4993  lev =   18 (0.80)  levB =   45  mem = 0.08 MB
ABC: LUT = 1552 : 2=174 11.2 %  3=867 55.9 %  4=511 32.9 %  Ave = 3.22
ABC: Warning: AIG with boxes has internal fanout in 0 complex flops and 1 carries.
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 1.75 seconds, total: 1.75 seconds

20.44.9.6. Executing AIGER frontend.
<suppressed ~6597 debug messages>
Removed 6761 unused cells and 17532 unused wires.

20.44.9.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:     1555
ABC RESULTS:   $__ICE40_CARRY_WRAPPER cells:      160
ABC RESULTS:           input signals:       44
ABC RESULTS:          output signals:     1037
Removing temp directory.

20.45. Executing ICE40_WRAPCARRY pass (wrap carries).

20.46. Executing TECHMAP pass (map to technology primitives).

20.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

20.46.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 207 unused cells and 19253 unused wires.

20.47. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:     1747
  1-LUT                3
  2-LUT              209
  3-LUT             1024
  4-LUT              511

Eliminating LUTs.
Number of LUTs:     1747
  1-LUT                3
  2-LUT              209
  3-LUT             1024
  4-LUT              511

Combining LUTs.
Number of LUTs:     1735
  1-LUT                3
  2-LUT              197
  3-LUT             1012
  4-LUT              523

Eliminated 0 LUTs.
Combined 12 LUTs.
<suppressed ~9769 debug messages>

20.48. Executing TECHMAP pass (map to technology primitives).

20.48.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

20.48.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010000100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001011000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001001000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000010010100101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001101000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000011011101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11011000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001000100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110010101010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010000011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011100010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00100111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100001001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010101010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100001000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010111001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010001010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111111111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101110101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010010001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101000100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001000101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101000001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111001000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001010111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000110000000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000000110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000010101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010011110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000000010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011100000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010001010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101110001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001101000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100100011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010101000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101000101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010000010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111001010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100110011000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000010110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101011001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111100000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101010011010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001110000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000110010101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000110000100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010001111101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001101011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010111000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001001000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
No more expansions possible.
<suppressed ~4556 debug messages>
Removed 0 unused cells and 3482 unused wires.

20.49. Executing AUTONAME pass.
Renamed 19426 objects in module top (44 iterations).
<suppressed ~4490 debug messages>

20.50. Executing HIERARCHY pass (managing design hierarchy).

20.50.1. Analyzing design hierarchy..
Top module:  \top

20.50.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

20.51. Printing statistics.

=== top ===

   Number of wires:               2093
   Number of wire bits:           6529
   Number of public wires:        2093
   Number of public wire bits:    6529
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2606
     SB_CARRY                      155
     SB_DFF                        418
     SB_DFFE                       155
     SB_DFFESR                       2
     SB_DFFN                         1
     SB_DFFSR                      107
     SB_DFFSS                        4
     SB_HFOSC                        1
     SB_LUT4                      1735
     SB_RAM40_4K                    28

20.52. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: Wire top.processor.alu_main.ALUOut has an unprocessed 'init' attribute.
Warning: Wire top.processor.immediate_generator.imm has an unprocessed 'init' attribute.
found and reported 2 problems.

20.53. Executing BLIF backend.

21. Executing JSON backend.

22. Printing statistics.

=== top ===

   Number of wires:               2093
   Number of wire bits:           6529
   Number of public wires:        2093
   Number of public wire bits:    6529
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2606
     SB_CARRY                      155
     SB_DFF                        418
     SB_DFFE                       155
     SB_DFFESR                       2
     SB_DFFN                         1
     SB_DFFSR                      107
     SB_DFFSS                        4
     SB_HFOSC                        1
     SB_LUT4                      1735
     SB_RAM40_4K                    28

Warnings: 3 unique messages, 4 total
End of script. Logfile hash: 5a5dece1df, CPU: user 2.98s system 0.18s, MEM: 322.56 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 31% 8x techmap (1 sec), 13% 23x opt_clean (0 sec), ...
